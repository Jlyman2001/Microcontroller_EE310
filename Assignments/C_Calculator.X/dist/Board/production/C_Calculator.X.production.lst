

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue Apr 09 18:06:04 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F47K42
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    21   000000                     
    22                           ; Generated 12/10/2023 GMT
    23                           ; 
    24                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F47K42 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56   000000                     
    57                           	psect	nvCOMRAM
    58   000018                     __pnvCOMRAM:
    59                           	callstack 0
    60   000018                     _key:
    61                           	callstack 0
    62   000018                     	ds	1
    63   000000                     _ANSELB	set	14928
    64   000000                     _LATB	set	16315
    65   000000                     _TRISB	set	16323
    66   000000                     _PORTB	set	16331
    67   000000                     _PORTD	set	16333
    68   000000                     _TRISD	set	16325
    69   000000                     _LATD	set	16317
    70   000000                     _ANSELD	set	14960
    71                           
    72                           ; #config settings
    73                           
    74                           	psect	cinit
    75   00261C                     __pcinit:
    76                           	callstack 0
    77   00261C                     start_initialization:
    78                           	callstack 0
    79   00261C                     __initialization:
    80                           	callstack 0
    81                           
    82                           ; Clear objects allocated to COMRAM (4 bytes)
    83   00261C  6A17               	clrf	(__pbssCOMRAM+3)& (0+255),c
    84   00261E  6A16               	clrf	(__pbssCOMRAM+2)& (0+255),c
    85   002620  6A15               	clrf	(__pbssCOMRAM+1)& (0+255),c
    86   002622  6A14               	clrf	__pbssCOMRAM& (0+255),c
    87   002624                     end_of_initialization:
    88                           	callstack 0
    89   002624                     __end_of__initialization:
    90                           	callstack 0
    91   002624  0100               	movlb	0
    92   002626  EF41  F011         	goto	_main	;jump to C main() function
    93                           
    94                           	psect	bssCOMRAM
    95   000014                     __pbssCOMRAM:
    96                           	callstack 0
    97   000014                     _Result:
    98                           	callstack 0
    99   000014                     	ds	1
   100   000015                     _Operation:
   101                           	callstack 0
   102   000015                     	ds	1
   103   000016                     _input_Y:
   104                           	callstack 0
   105   000016                     	ds	1
   106   000017                     _input_X:
   107                           	callstack 0
   108   000017                     	ds	1
   109                           
   110                           	psect	cstackCOMRAM
   111   000001                     __pcstackCOMRAM:
   112                           	callstack 0
   113   000001                     ??_getKeypress:
   114   000001                     ?___awdiv:
   115                           	callstack 0
   116   000001                     display@Result:
   117                           	callstack 0
   118   000001                     ___awdiv@dividend:
   119                           	callstack 0
   120                           
   121                           ; 2 bytes @ 0x0
   122   000001                     	ds	1
   123   000002                     ??_getInputX:
   124   000002                     ??_getInputY:
   125   000002                     ??_getInputOperation:
   126                           
   127                           ; 1 bytes @ 0x1
   128   000002                     	ds	1
   129   000003                     ___awdiv@divisor:
   130                           	callstack 0
   131                           
   132                           ; 2 bytes @ 0x2
   133   000003                     	ds	2
   134   000005                     ___awdiv@counter:
   135                           	callstack 0
   136                           
   137                           ; 1 bytes @ 0x4
   138   000005                     	ds	1
   139   000006                     ___awdiv@sign:
   140                           	callstack 0
   141                           
   142                           ; 1 bytes @ 0x5
   143   000006                     	ds	1
   144   000007                     ___awdiv@quotient:
   145                           	callstack 0
   146                           
   147                           ; 2 bytes @ 0x6
   148   000007                     	ds	2
   149   000009                     evaluate@input_X:
   150                           	callstack 0
   151                           
   152                           ; 2 bytes @ 0x8
   153   000009                     	ds	2
   154   00000B                     evaluate@input_Y:
   155                           	callstack 0
   156                           
   157                           ; 2 bytes @ 0xA
   158   00000B                     	ds	2
   159   00000D                     evaluate@Operation:
   160                           	callstack 0
   161                           
   162                           ; 2 bytes @ 0xC
   163   00000D                     	ds	2
   164   00000F                     ??_evaluate:
   165                           
   166                           ; 1 bytes @ 0xE
   167   00000F                     	ds	2
   168   000011                     evaluate@result:
   169                           	callstack 0
   170                           
   171                           ; 1 bytes @ 0x10
   172   000011                     	ds	1
   173   000012                     ??_main:
   174                           
   175                           ; 1 bytes @ 0x11
   176   000012                     	ds	2
   177                           
   178 ;;
   179 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   180 ;;
   181 ;; *************** function _main *****************
   182 ;; Defined at:
   183 ;;		line 224 in file "newmain.c"
   184 ;; Parameters:    Size  Location     Type
   185 ;;		None
   186 ;; Auto vars:     Size  Location     Type
   187 ;;		None
   188 ;; Return value:  Size  Location     Type
   189 ;;                  1    wreg      void 
   190 ;; Registers used:
   191 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   192 ;; Tracked objects:
   193 ;;		On entry : 0/0
   194 ;;		On exit  : 0/0
   195 ;;		Unchanged: 0/0
   196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
   197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   199 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   200 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   201 ;;Total ram usage:        2 bytes
   202 ;; Hardware stack levels required when called: 2
   203 ;; This function calls:
   204 ;;		_display
   205 ;;		_evaluate
   206 ;;		_getInputOperation
   207 ;;		_getInputX
   208 ;;		_getInputY
   209 ;;		_getKeypress
   210 ;; This function is called by:
   211 ;;		Startup code after reset
   212 ;; This function uses a non-reentrant model
   213 ;;
   214                           
   215                           	psect	text0
   216   002282                     __ptext0:
   217                           	callstack 0
   218   002282                     _main:
   219                           	callstack 29
   220   002282                     
   221                           ;newmain.c: 227:     TRISB = 0xF0;
   222   002282  0EF0               	movlw	240
   223   002284  6EC3               	movwf	195,c	;volatile
   224                           
   225                           ;newmain.c: 228:     LATB = 0;
   226   002286  0E00               	movlw	0
   227   002288  6EBB               	movwf	187,c	;volatile
   228                           
   229                           ;newmain.c: 229:     PORTB = 0;
   230   00228A  0E00               	movlw	0
   231   00228C  6ECB               	movwf	203,c	;volatile
   232                           
   233                           ;newmain.c: 230:     ANSELB = 0;
   234   00228E  0E00               	movlw	0
   235   002290  013A               	movlb	58	; () banked
   236   002292  6F50               	movwf	80,b	;volatile
   237                           
   238                           ;newmain.c: 232:     TRISD = 0;
   239   002294  0E00               	movlw	0
   240   002296  6EC5               	movwf	197,c	;volatile
   241                           
   242                           ;newmain.c: 233:     LATD = 0;
   243   002298  0E00               	movlw	0
   244   00229A  6EBD               	movwf	189,c	;volatile
   245                           
   246                           ;newmain.c: 234:     PORTD = 0;
   247   00229C  0E00               	movlw	0
   248   00229E  6ECD               	movwf	205,c	;volatile
   249                           
   250                           ;newmain.c: 235:     ANSELD = 0;
   251   0022A0  0E00               	movlw	0
   252   0022A2  6F70               	movwf	112,b	;volatile
   253   0022A4                     l1178:
   254                           
   255                           ;newmain.c: 239:     {;newmain.c: 240:         getInputX();
   256   0022A4  ECAD  F012         	call	_getInputX	;wreg free
   257   0022A8                     
   258                           ;newmain.c: 241:         PORTD = 0x01;
   259   0022A8  0E01               	movlw	1
   260   0022AA  6ECD               	movwf	205,c	;volatile
   261   0022AC                     
   262                           ;newmain.c: 242:         _delay((unsigned long)((500)*(4000000/4000.0)));
   263   0022AC  0E03               	movlw	3
   264   0022AE  6E13               	movwf	(??_main+1)^0,c
   265   0022B0  0E8A               	movlw	138
   266   0022B2  6E12               	movwf	??_main^0,c
   267   0022B4  0E56               	movlw	86
   268   0022B6                     u397:
   269   0022B6  2EE8               	decfsz	wreg,f,c
   270   0022B8  D7FE               	bra	u397
   271   0022BA  2E12               	decfsz	??_main^0,f,c
   272   0022BC  D7FC               	bra	u397
   273   0022BE  2E13               	decfsz	(??_main+1)^0,f,c
   274   0022C0  D7FA               	bra	u397
   275   0022C2                     
   276                           ;newmain.c: 243:         getInputOperation();
   277   0022C2  ECEC  F012         	call	_getInputOperation	;wreg free
   278   0022C6                     
   279                           ;newmain.c: 244:         PORTD = 0x03;
   280   0022C6  0E03               	movlw	3
   281   0022C8  6ECD               	movwf	205,c	;volatile
   282   0022CA                     
   283                           ;newmain.c: 245:         _delay((unsigned long)((500)*(4000000/4000.0)));
   284   0022CA  0E03               	movlw	3
   285   0022CC  6E13               	movwf	(??_main+1)^0,c
   286   0022CE  0E8A               	movlw	138
   287   0022D0  6E12               	movwf	??_main^0,c
   288   0022D2  0E56               	movlw	86
   289   0022D4                     u407:
   290   0022D4  2EE8               	decfsz	wreg,f,c
   291   0022D6  D7FE               	bra	u407
   292   0022D8  2E12               	decfsz	??_main^0,f,c
   293   0022DA  D7FC               	bra	u407
   294   0022DC  2E13               	decfsz	(??_main+1)^0,f,c
   295   0022DE  D7FA               	bra	u407
   296   0022E0                     
   297                           ;newmain.c: 246:         getInputY();
   298   0022E0  EC6E  F012         	call	_getInputY	;wreg free
   299   0022E4                     
   300                           ;newmain.c: 247:         PORTD = 0x02;
   301   0022E4  0E02               	movlw	2
   302   0022E6  6ECD               	movwf	205,c	;volatile
   303   0022E8                     
   304                           ;newmain.c: 248:         _delay((unsigned long)((500)*(4000000/4000.0)));
   305   0022E8  0E03               	movlw	3
   306   0022EA  6E13               	movwf	(??_main+1)^0,c
   307   0022EC  0E8A               	movlw	138
   308   0022EE  6E12               	movwf	??_main^0,c
   309   0022F0  0E56               	movlw	86
   310   0022F2                     u417:
   311   0022F2  2EE8               	decfsz	wreg,f,c
   312   0022F4  D7FE               	bra	u417
   313   0022F6  2E12               	decfsz	??_main^0,f,c
   314   0022F8  D7FC               	bra	u417
   315   0022FA  2E13               	decfsz	(??_main+1)^0,f,c
   316   0022FC  D7FA               	bra	u417
   317   0022FE                     
   318                           ;newmain.c: 250:         key = 0xFF;
   319   0022FE  6818               	setf	_key^0,c
   320                           
   321                           ;newmain.c: 251:         while(key != 0x0F)
   322   002300  EF8C  F011         	goto	l1202
   323   002304                     l1198:
   324                           
   325                           ;newmain.c: 252:         {;newmain.c: 253:             _delay((unsigned long)((10)*(4000
      +                          000/4000.0)));
   326   002304  0E0D               	movlw	13
   327   002306  6E12               	movwf	??_main^0,c
   328   002308  0EFC               	movlw	252
   329   00230A                     u427:
   330   00230A  2EE8               	decfsz	wreg,f,c
   331   00230C  D7FE               	bra	u427
   332   00230E  2E12               	decfsz	??_main^0,f,c
   333   002310  D7FC               	bra	u427
   334   002312                     
   335                           ;newmain.c: 254:             key = getKeypress();
   336   002312  EC01  F010         	call	_getKeypress	;wreg free
   337   002316  6E18               	movwf	_key^0,c
   338   002318                     l1202:
   339                           
   340                           ;newmain.c: 251:         while(key != 0x0F)
   341   002318  0E0F               	movlw	15
   342   00231A  1818               	xorwf	_key^0,w,c
   343   00231C  A4D8               	btfss	status,2,c
   344   00231E  EF93  F011         	goto	u371
   345   002322  EF95  F011         	goto	u370
   346   002326                     u371:
   347   002326  EF82  F011         	goto	l1198
   348   00232A                     u370:
   349   00232A                     
   350                           ;newmain.c: 257:         Result = evaluate(input_X,input_Y,Operation);
   351   00232A  C017  F009         	movff	_input_X,evaluate@input_X
   352   00232E  6A0A               	clrf	(evaluate@input_X+1)^0,c
   353   002330  C016  F00B         	movff	_input_Y,evaluate@input_Y
   354   002334  6A0C               	clrf	(evaluate@input_Y+1)^0,c
   355   002336  C015  F00D         	movff	_Operation,evaluate@Operation
   356   00233A  6A0E               	clrf	(evaluate@Operation+1)^0,c
   357   00233C  EC2A  F012         	call	_evaluate	;wreg free
   358   002340  6E14               	movwf	_Result^0,c
   359   002342                     
   360                           ;newmain.c: 258:         display(Result);
   361   002342  5014               	movf	_Result^0,w,c
   362   002344  EC15  F013         	call	_display
   363   002348                     
   364                           ;newmain.c: 259:         _delay((unsigned long)((10)*(4000000/4000.0)));
   365   002348  0E0D               	movlw	13
   366   00234A  6E12               	movwf	??_main^0,c
   367   00234C  0EFC               	movlw	252
   368   00234E                     u437:
   369   00234E  2EE8               	decfsz	wreg,f,c
   370   002350  D7FE               	bra	u437
   371   002352  2E12               	decfsz	??_main^0,f,c
   372   002354  D7FC               	bra	u437
   373   002356                     
   374                           ;newmain.c: 260:         key = 0xFF;
   375   002356  6818               	setf	_key^0,c
   376                           
   377                           ;newmain.c: 261:         while(getKeypress() != 0x0E)
   378   002358  EFB8  F011         	goto	l1216
   379   00235C                     l1212:
   380                           
   381                           ;newmain.c: 262:         {;newmain.c: 263:             _delay((unsigned long)((10)*(4000
      +                          000/4000.0)));
   382   00235C  0E0D               	movlw	13
   383   00235E  6E12               	movwf	??_main^0,c
   384   002360  0EFC               	movlw	252
   385   002362                     u447:
   386   002362  2EE8               	decfsz	wreg,f,c
   387   002364  D7FE               	bra	u447
   388   002366  2E12               	decfsz	??_main^0,f,c
   389   002368  D7FC               	bra	u447
   390   00236A                     
   391                           ;newmain.c: 264:             key = getKeypress();
   392   00236A  EC01  F010         	call	_getKeypress	;wreg free
   393   00236E  6E18               	movwf	_key^0,c
   394   002370                     l1216:
   395                           
   396                           ;newmain.c: 261:         while(getKeypress() != 0x0E)
   397   002370  EC01  F010         	call	_getKeypress	;wreg free
   398   002374  0A0E               	xorlw	14
   399   002376  A4D8               	btfss	status,2,c
   400   002378  EFC0  F011         	goto	u381
   401   00237C  EFC2  F011         	goto	u380
   402   002380                     u381:
   403   002380  EFAE  F011         	goto	l1212
   404   002384                     u380:
   405   002384                     
   406                           ;newmain.c: 266:         PORTD = 0x80;
   407   002384  0E80               	movlw	128
   408   002386  6ECD               	movwf	205,c	;volatile
   409   002388  EF52  F011         	goto	l1178
   410   00238C  EFFE  F0FF         	goto	start
   411   002390                     __end_of_main:
   412                           	callstack 0
   413                           
   414 ;; *************** function _getInputY *****************
   415 ;; Defined at:
   416 ;;		line 164 in file "newmain.c"
   417 ;; Parameters:    Size  Location     Type
   418 ;;		None
   419 ;; Auto vars:     Size  Location     Type
   420 ;;		None
   421 ;; Return value:  Size  Location     Type
   422 ;;                  1    wreg      void 
   423 ;; Registers used:
   424 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   425 ;; Tracked objects:
   426 ;;		On entry : 0/0
   427 ;;		On exit  : 0/0
   428 ;;		Unchanged: 0/0
   429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
   430 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   432 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   433 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   434 ;;Total ram usage:        2 bytes
   435 ;; Hardware stack levels used: 1
   436 ;; Hardware stack levels required when called: 1
   437 ;; This function calls:
   438 ;;		_getKeypress
   439 ;; This function is called by:
   440 ;;		_main
   441 ;; This function uses a non-reentrant model
   442 ;;
   443                           
   444                           	psect	text1
   445   0024DC                     __ptext1:
   446                           	callstack 0
   447   0024DC                     _getInputY:
   448                           	callstack 29
   449   0024DC                     
   450                           ;newmain.c: 166:     input_Y = 0;
   451   0024DC  0E00               	movlw	0
   452   0024DE  6E16               	movwf	_input_Y^0,c
   453   0024E0                     
   454                           ;newmain.c: 167:     key = 0xFF;
   455   0024E0  6818               	setf	_key^0,c
   456                           
   457                           ;newmain.c: 168:     while (key >= 0x0A){
   458   0024E2  EF7D  F012         	goto	l962
   459   0024E6                     l958:
   460                           
   461                           ;newmain.c: 169:         key = getKeypress();
   462   0024E6  EC01  F010         	call	_getKeypress	;wreg free
   463   0024EA  6E18               	movwf	_key^0,c
   464   0024EC                     
   465                           ;newmain.c: 170:         _delay((unsigned long)((10)*(4000000/4000.0)));
   466   0024EC  0E0D               	movlw	13
   467   0024EE  6E02               	movwf	??_getInputY^0,c
   468   0024F0  0EFC               	movlw	252
   469   0024F2                     u457:
   470   0024F2  2EE8               	decfsz	wreg,f,c
   471   0024F4  D7FE               	bra	u457
   472   0024F6  2E02               	decfsz	??_getInputY^0,f,c
   473   0024F8  D7FC               	bra	u457
   474   0024FA                     l962:
   475                           
   476                           ;newmain.c: 168:     while (key >= 0x0A){
   477   0024FA  0E0A               	movlw	10
   478   0024FC  6018               	cpfslt	_key^0,c
   479   0024FE  EF83  F012         	goto	u251
   480   002502  EF85  F012         	goto	u250
   481   002506                     u251:
   482   002506  EF73  F012         	goto	l958
   483   00250A                     u250:
   484   00250A                     
   485                           ;newmain.c: 172:     _delay((unsigned long)((300)*(4000000/4000.0)));
   486   00250A  0E02               	movlw	2
   487   00250C  6E03               	movwf	(??_getInputY+1)^0,c
   488   00250E  0E86               	movlw	134
   489   002510  6E02               	movwf	??_getInputY^0,c
   490   002512  0E99               	movlw	153
   491   002514                     u467:
   492   002514  2EE8               	decfsz	wreg,f,c
   493   002516  D7FE               	bra	u467
   494   002518  2E02               	decfsz	??_getInputY^0,f,c
   495   00251A  D7FC               	bra	u467
   496   00251C  2E03               	decfsz	(??_getInputY+1)^0,f,c
   497   00251E  D7FA               	bra	u467
   498   002520  0000               	nop	
   499   002522                     
   500                           ;newmain.c: 173:     input_Y += 10*key;
   501   002522  5018               	movf	_key^0,w,c
   502   002524  0D0A               	mullw	10
   503   002526  50F3               	movf	243,w,c
   504   002528  2616               	addwf	_input_Y^0,f,c
   505   00252A                     
   506                           ;newmain.c: 174:     key = 0xFF;
   507   00252A  6818               	setf	_key^0,c
   508                           
   509                           ;newmain.c: 175:     while (key >= 0x0A){
   510   00252C  EFA2  F012         	goto	l974
   511   002530                     l970:
   512                           
   513                           ;newmain.c: 176:         key = getKeypress();
   514   002530  EC01  F010         	call	_getKeypress	;wreg free
   515   002534  6E18               	movwf	_key^0,c
   516   002536                     
   517                           ;newmain.c: 177:         _delay((unsigned long)((10)*(4000000/4000.0)));
   518   002536  0E0D               	movlw	13
   519   002538  6E02               	movwf	??_getInputY^0,c
   520   00253A  0EFC               	movlw	252
   521   00253C                     u477:
   522   00253C  2EE8               	decfsz	wreg,f,c
   523   00253E  D7FE               	bra	u477
   524   002540  2E02               	decfsz	??_getInputY^0,f,c
   525   002542  D7FC               	bra	u477
   526   002544                     l974:
   527                           
   528                           ;newmain.c: 175:     while (key >= 0x0A){
   529   002544  0E0A               	movlw	10
   530   002546  6018               	cpfslt	_key^0,c
   531   002548  EFA8  F012         	goto	u261
   532   00254C  EFAA  F012         	goto	u260
   533   002550                     u261:
   534   002550  EF98  F012         	goto	l970
   535   002554                     u260:
   536   002554                     
   537                           ;newmain.c: 179:     input_Y += key;
   538   002554  5018               	movf	_key^0,w,c
   539   002556  2616               	addwf	_input_Y^0,f,c
   540   002558  0012               	return		;funcret
   541   00255A                     __end_of_getInputY:
   542                           	callstack 0
   543                           
   544 ;; *************** function _getInputX *****************
   545 ;; Defined at:
   546 ;;		line 145 in file "newmain.c"
   547 ;; Parameters:    Size  Location     Type
   548 ;;		None
   549 ;; Auto vars:     Size  Location     Type
   550 ;;		None
   551 ;; Return value:  Size  Location     Type
   552 ;;                  1    wreg      void 
   553 ;; Registers used:
   554 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   555 ;; Tracked objects:
   556 ;;		On entry : 0/0
   557 ;;		On exit  : 0/0
   558 ;;		Unchanged: 0/0
   559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
   560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   562 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   563 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   564 ;;Total ram usage:        2 bytes
   565 ;; Hardware stack levels used: 1
   566 ;; Hardware stack levels required when called: 1
   567 ;; This function calls:
   568 ;;		_getKeypress
   569 ;; This function is called by:
   570 ;;		_main
   571 ;; This function uses a non-reentrant model
   572 ;;
   573                           
   574                           	psect	text2
   575   00255A                     __ptext2:
   576                           	callstack 0
   577   00255A                     _getInputX:
   578                           	callstack 29
   579   00255A                     
   580                           ;newmain.c: 147:     input_X = 0;
   581   00255A  0E00               	movlw	0
   582   00255C  6E17               	movwf	_input_X^0,c
   583   00255E                     
   584                           ;newmain.c: 148:     key = 0xFF;
   585   00255E  6818               	setf	_key^0,c
   586                           
   587                           ;newmain.c: 149:     while (key >= 0x0A){
   588   002560  EFBC  F012         	goto	l938
   589   002564                     l934:
   590                           
   591                           ;newmain.c: 150:         key = getKeypress();
   592   002564  EC01  F010         	call	_getKeypress	;wreg free
   593   002568  6E18               	movwf	_key^0,c
   594   00256A                     
   595                           ;newmain.c: 151:         _delay((unsigned long)((10)*(4000000/4000.0)));
   596   00256A  0E0D               	movlw	13
   597   00256C  6E02               	movwf	??_getInputX^0,c
   598   00256E  0EFC               	movlw	252
   599   002570                     u487:
   600   002570  2EE8               	decfsz	wreg,f,c
   601   002572  D7FE               	bra	u487
   602   002574  2E02               	decfsz	??_getInputX^0,f,c
   603   002576  D7FC               	bra	u487
   604   002578                     l938:
   605                           
   606                           ;newmain.c: 149:     while (key >= 0x0A){
   607   002578  0E0A               	movlw	10
   608   00257A  6018               	cpfslt	_key^0,c
   609   00257C  EFC2  F012         	goto	u231
   610   002580  EFC4  F012         	goto	u230
   611   002584                     u231:
   612   002584  EFB2  F012         	goto	l934
   613   002588                     u230:
   614   002588                     
   615                           ;newmain.c: 153:     _delay((unsigned long)((300)*(4000000/4000.0)));
   616   002588  0E02               	movlw	2
   617   00258A  6E03               	movwf	(??_getInputX+1)^0,c
   618   00258C  0E86               	movlw	134
   619   00258E  6E02               	movwf	??_getInputX^0,c
   620   002590  0E99               	movlw	153
   621   002592                     u497:
   622   002592  2EE8               	decfsz	wreg,f,c
   623   002594  D7FE               	bra	u497
   624   002596  2E02               	decfsz	??_getInputX^0,f,c
   625   002598  D7FC               	bra	u497
   626   00259A  2E03               	decfsz	(??_getInputX+1)^0,f,c
   627   00259C  D7FA               	bra	u497
   628   00259E  0000               	nop	
   629   0025A0                     
   630                           ;newmain.c: 154:     input_X += 10*key;
   631   0025A0  5018               	movf	_key^0,w,c
   632   0025A2  0D0A               	mullw	10
   633   0025A4  50F3               	movf	243,w,c
   634   0025A6  2617               	addwf	_input_X^0,f,c
   635   0025A8                     
   636                           ;newmain.c: 155:     key = 0xFF;
   637   0025A8  6818               	setf	_key^0,c
   638                           
   639                           ;newmain.c: 156:     while (key >= 0x0A){
   640   0025AA  EFE1  F012         	goto	l950
   641   0025AE                     l946:
   642                           
   643                           ;newmain.c: 157:         key = getKeypress();
   644   0025AE  EC01  F010         	call	_getKeypress	;wreg free
   645   0025B2  6E18               	movwf	_key^0,c
   646   0025B4                     
   647                           ;newmain.c: 158:         _delay((unsigned long)((10)*(4000000/4000.0)));
   648   0025B4  0E0D               	movlw	13
   649   0025B6  6E02               	movwf	??_getInputX^0,c
   650   0025B8  0EFC               	movlw	252
   651   0025BA                     u507:
   652   0025BA  2EE8               	decfsz	wreg,f,c
   653   0025BC  D7FE               	bra	u507
   654   0025BE  2E02               	decfsz	??_getInputX^0,f,c
   655   0025C0  D7FC               	bra	u507
   656   0025C2                     l950:
   657                           
   658                           ;newmain.c: 156:     while (key >= 0x0A){
   659   0025C2  0E0A               	movlw	10
   660   0025C4  6018               	cpfslt	_key^0,c
   661   0025C6  EFE7  F012         	goto	u241
   662   0025CA  EFE9  F012         	goto	u240
   663   0025CE                     u241:
   664   0025CE  EFD7  F012         	goto	l946
   665   0025D2                     u240:
   666   0025D2                     
   667                           ;newmain.c: 160:     input_X += key;
   668   0025D2  5018               	movf	_key^0,w,c
   669   0025D4  2617               	addwf	_input_X^0,f,c
   670   0025D6  0012               	return		;funcret
   671   0025D8                     __end_of_getInputX:
   672                           	callstack 0
   673                           
   674 ;; *************** function _getInputOperation *****************
   675 ;; Defined at:
   676 ;;		line 182 in file "newmain.c"
   677 ;; Parameters:    Size  Location     Type
   678 ;;		None
   679 ;; Auto vars:     Size  Location     Type
   680 ;;		None
   681 ;; Return value:  Size  Location     Type
   682 ;;                  1    wreg      void 
   683 ;; Registers used:
   684 ;;		wreg, status,2, status,0, cstack
   685 ;; Tracked objects:
   686 ;;		On entry : 0/0
   687 ;;		On exit  : 0/0
   688 ;;		Unchanged: 0/0
   689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
   690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   692 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   693 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   694 ;;Total ram usage:        1 bytes
   695 ;; Hardware stack levels used: 1
   696 ;; Hardware stack levels required when called: 1
   697 ;; This function calls:
   698 ;;		_getKeypress
   699 ;; This function is called by:
   700 ;;		_main
   701 ;; This function uses a non-reentrant model
   702 ;;
   703                           
   704                           	psect	text3
   705   0025D8                     __ptext3:
   706                           	callstack 0
   707   0025D8                     _getInputOperation:
   708                           	callstack 29
   709   0025D8                     
   710                           ;newmain.c: 184:     Operation = 0;
   711   0025D8  0E00               	movlw	0
   712   0025DA  6E15               	movwf	_Operation^0,c
   713   0025DC                     
   714                           ;newmain.c: 185:     key = 0xFF;
   715   0025DC  6818               	setf	_key^0,c
   716                           
   717                           ;newmain.c: 186:     while (key > 0x0F || key < 0x0A)
   718   0025DE  EFFB  F012         	goto	l986
   719   0025E2                     l982:
   720                           
   721                           ;newmain.c: 187:     {;newmain.c: 188:         key = getKeypress();
   722   0025E2  EC01  F010         	call	_getKeypress	;wreg free
   723   0025E6  6E18               	movwf	_key^0,c
   724   0025E8                     
   725                           ;newmain.c: 189:         _delay((unsigned long)((10)*(4000000/4000.0)));
   726   0025E8  0E0D               	movlw	13
   727   0025EA  6E02               	movwf	??_getInputOperation^0,c
   728   0025EC  0EFC               	movlw	252
   729   0025EE                     u517:
   730   0025EE  2EE8               	decfsz	wreg,f,c
   731   0025F0  D7FE               	bra	u517
   732   0025F2  2E02               	decfsz	??_getInputOperation^0,f,c
   733   0025F4  D7FC               	bra	u517
   734   0025F6                     l986:
   735                           
   736                           ;newmain.c: 186:     while (key > 0x0F || key < 0x0A)
   737   0025F6  0E10               	movlw	16
   738   0025F8  6018               	cpfslt	_key^0,c
   739   0025FA  EF01  F013         	goto	u271
   740   0025FE  EF03  F013         	goto	u270
   741   002602                     u271:
   742   002602  EFF1  F012         	goto	l982
   743   002606                     u270:
   744   002606  0E09               	movlw	9
   745   002608  6418               	cpfsgt	_key^0,c
   746   00260A  EF09  F013         	goto	u281
   747   00260E  EF0B  F013         	goto	u280
   748   002612                     u281:
   749   002612  EFF1  F012         	goto	l982
   750   002616                     u280:
   751   002616                     
   752                           ;newmain.c: 191:         Operation = key;
   753   002616  C018  F015         	movff	_key,_Operation
   754   00261A  0012               	return		;funcret
   755   00261C                     __end_of_getInputOperation:
   756                           	callstack 0
   757                           
   758 ;; *************** function _getKeypress *****************
   759 ;; Defined at:
   760 ;;		line 34 in file "newmain.c"
   761 ;; Parameters:    Size  Location     Type
   762 ;;		None
   763 ;; Auto vars:     Size  Location     Type
   764 ;;		None
   765 ;; Return value:  Size  Location     Type
   766 ;;                  1    wreg      unsigned char 
   767 ;; Registers used:
   768 ;;		wreg, status,2, status,0
   769 ;; Tracked objects:
   770 ;;		On entry : 0/0
   771 ;;		On exit  : 0/0
   772 ;;		Unchanged: 0/0
   773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
   774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   776 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   777 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   778 ;;Total ram usage:        1 bytes
   779 ;; Hardware stack levels used: 1
   780 ;; This function calls:
   781 ;;		Nothing
   782 ;; This function is called by:
   783 ;;		_getInputX
   784 ;;		_getInputY
   785 ;;		_getInputOperation
   786 ;;		_main
   787 ;; This function uses a non-reentrant model
   788 ;;
   789                           
   790                           	psect	text4
   791   002002                     __ptext4:
   792                           	callstack 0
   793   002002                     _getKeypress:
   794                           	callstack 30
   795   002002                     
   796                           ;newmain.c: 38:     key = 0xFF;
   797   002002  6818               	setf	_key^0,c
   798   002004                     
   799                           ;newmain.c: 39:     PORTB = 0x01;
   800   002004  0E01               	movlw	1
   801   002006  6ECB               	movwf	203,c	;volatile
   802   002008                     
   803                           ;newmain.c: 43:             if (PORTB == 0x11)
   804   002008  0E11               	movlw	17
   805   00200A  18CB               	xorwf	203,w,c	;volatile
   806   00200C  A4D8               	btfss	status,2,c
   807   00200E  EF0B  F010         	goto	u11
   808   002012  EF0D  F010         	goto	u10
   809   002016                     u11:
   810   002016  EF16  F010         	goto	l784
   811   00201A                     u10:
   812   00201A                     
   813                           ;newmain.c: 44:             {;newmain.c: 45:                 key = 0x0D;
   814   00201A  0E0D               	movlw	13
   815   00201C  6E18               	movwf	_key^0,c
   816   00201E                     
   817                           ;newmain.c: 46:                 _delay((unsigned long)((10)*(4000000/4000.0)));
   818   00201E  0E0D               	movlw	13
   819   002020  6E01               	movwf	??_getKeypress^0,c
   820   002022  0EFC               	movlw	252
   821   002024                     u527:
   822   002024  2EE8               	decfsz	wreg,f,c
   823   002026  D7FE               	bra	u527
   824   002028  2E01               	decfsz	??_getKeypress^0,f,c
   825   00202A  D7FC               	bra	u527
   826   00202C                     l784:
   827                           
   828                           ;newmain.c: 49:             if (PORTB == 0x21){
   829   00202C  0E21               	movlw	33
   830   00202E  18CB               	xorwf	203,w,c	;volatile
   831   002030  A4D8               	btfss	status,2,c
   832   002032  EF1D  F010         	goto	u21
   833   002036  EF1F  F010         	goto	u20
   834   00203A                     u21:
   835   00203A  EF28  F010         	goto	l790
   836   00203E                     u20:
   837   00203E                     
   838                           ;newmain.c: 50:                 key = 0x0C;
   839   00203E  0E0C               	movlw	12
   840   002040  6E18               	movwf	_key^0,c
   841   002042                     
   842                           ;newmain.c: 51:                 _delay((unsigned long)((10)*(4000000/4000.0)));
   843   002042  0E0D               	movlw	13
   844   002044  6E01               	movwf	??_getKeypress^0,c
   845   002046  0EFC               	movlw	252
   846   002048                     u537:
   847   002048  2EE8               	decfsz	wreg,f,c
   848   00204A  D7FE               	bra	u537
   849   00204C  2E01               	decfsz	??_getKeypress^0,f,c
   850   00204E  D7FC               	bra	u537
   851   002050                     l790:
   852                           
   853                           ;newmain.c: 54:             if (PORTB == 0x41){
   854   002050  0E41               	movlw	65
   855   002052  18CB               	xorwf	203,w,c	;volatile
   856   002054  A4D8               	btfss	status,2,c
   857   002056  EF2F  F010         	goto	u31
   858   00205A  EF31  F010         	goto	u30
   859   00205E                     u31:
   860   00205E  EF3A  F010         	goto	l796
   861   002062                     u30:
   862   002062                     
   863                           ;newmain.c: 55:                 key = 0x0B;
   864   002062  0E0B               	movlw	11
   865   002064  6E18               	movwf	_key^0,c
   866   002066                     
   867                           ;newmain.c: 56:                 _delay((unsigned long)((10)*(4000000/4000.0)));
   868   002066  0E0D               	movlw	13
   869   002068  6E01               	movwf	??_getKeypress^0,c
   870   00206A  0EFC               	movlw	252
   871   00206C                     u547:
   872   00206C  2EE8               	decfsz	wreg,f,c
   873   00206E  D7FE               	bra	u547
   874   002070  2E01               	decfsz	??_getKeypress^0,f,c
   875   002072  D7FC               	bra	u547
   876   002074                     l796:
   877                           
   878                           ;newmain.c: 59:             if (PORTB == 0x81){
   879   002074  0E81               	movlw	129
   880   002076  18CB               	xorwf	203,w,c	;volatile
   881   002078  A4D8               	btfss	status,2,c
   882   00207A  EF41  F010         	goto	u41
   883   00207E  EF43  F010         	goto	u40
   884   002082                     u41:
   885   002082  EF4C  F010         	goto	l802
   886   002086                     u40:
   887   002086                     
   888                           ;newmain.c: 60:                 key = 0x0A;
   889   002086  0E0A               	movlw	10
   890   002088  6E18               	movwf	_key^0,c
   891   00208A                     
   892                           ;newmain.c: 61:                 _delay((unsigned long)((10)*(4000000/4000.0)));
   893   00208A  0E0D               	movlw	13
   894   00208C  6E01               	movwf	??_getKeypress^0,c
   895   00208E  0EFC               	movlw	252
   896   002090                     u557:
   897   002090  2EE8               	decfsz	wreg,f,c
   898   002092  D7FE               	bra	u557
   899   002094  2E01               	decfsz	??_getKeypress^0,f,c
   900   002096  D7FC               	bra	u557
   901   002098                     l802:
   902                           
   903                           ;newmain.c: 66:     PORTB = 0x02;
   904   002098  0E02               	movlw	2
   905   00209A  6ECB               	movwf	203,c	;volatile
   906                           
   907                           ;newmain.c: 67:     _delay((unsigned long)((10)*(4000000/4000.0)));
   908   00209C  0E0D               	movlw	13
   909   00209E  6E01               	movwf	??_getKeypress^0,c
   910   0020A0  0EFC               	movlw	252
   911   0020A2                     u567:
   912   0020A2  2EE8               	decfsz	wreg,f,c
   913   0020A4  D7FE               	bra	u567
   914   0020A6  2E01               	decfsz	??_getKeypress^0,f,c
   915   0020A8  D7FC               	bra	u567
   916   0020AA                     
   917                           ;newmain.c: 70:             if (PORTB == 0x12){
   918   0020AA  0E12               	movlw	18
   919   0020AC  18CB               	xorwf	203,w,c	;volatile
   920   0020AE  A4D8               	btfss	status,2,c
   921   0020B0  EF5C  F010         	goto	u51
   922   0020B4  EF5E  F010         	goto	u50
   923   0020B8                     u51:
   924   0020B8  EF67  F010         	goto	l810
   925   0020BC                     u50:
   926   0020BC                     
   927                           ;newmain.c: 71:                 key = 0x0F;
   928   0020BC  0E0F               	movlw	15
   929   0020BE  6E18               	movwf	_key^0,c
   930   0020C0                     
   931                           ;newmain.c: 72:                 _delay((unsigned long)((10)*(4000000/4000.0)));
   932   0020C0  0E0D               	movlw	13
   933   0020C2  6E01               	movwf	??_getKeypress^0,c
   934   0020C4  0EFC               	movlw	252
   935   0020C6                     u577:
   936   0020C6  2EE8               	decfsz	wreg,f,c
   937   0020C8  D7FE               	bra	u577
   938   0020CA  2E01               	decfsz	??_getKeypress^0,f,c
   939   0020CC  D7FC               	bra	u577
   940   0020CE                     l810:
   941                           
   942                           ;newmain.c: 75:             if (PORTB == 0x22){
   943   0020CE  0E22               	movlw	34
   944   0020D0  18CB               	xorwf	203,w,c	;volatile
   945   0020D2  A4D8               	btfss	status,2,c
   946   0020D4  EF6E  F010         	goto	u61
   947   0020D8  EF70  F010         	goto	u60
   948   0020DC                     u61:
   949   0020DC  EF79  F010         	goto	l816
   950   0020E0                     u60:
   951   0020E0                     
   952                           ;newmain.c: 76:                 key = 9;
   953   0020E0  0E09               	movlw	9
   954   0020E2  6E18               	movwf	_key^0,c
   955   0020E4                     
   956                           ;newmain.c: 77:                 _delay((unsigned long)((10)*(4000000/4000.0)));
   957   0020E4  0E0D               	movlw	13
   958   0020E6  6E01               	movwf	??_getKeypress^0,c
   959   0020E8  0EFC               	movlw	252
   960   0020EA                     u587:
   961   0020EA  2EE8               	decfsz	wreg,f,c
   962   0020EC  D7FE               	bra	u587
   963   0020EE  2E01               	decfsz	??_getKeypress^0,f,c
   964   0020F0  D7FC               	bra	u587
   965   0020F2                     l816:
   966                           
   967                           ;newmain.c: 80:             if (PORTB == 0x42){
   968   0020F2  0E42               	movlw	66
   969   0020F4  18CB               	xorwf	203,w,c	;volatile
   970   0020F6  A4D8               	btfss	status,2,c
   971   0020F8  EF80  F010         	goto	u71
   972   0020FC  EF82  F010         	goto	u70
   973   002100                     u71:
   974   002100  EF8B  F010         	goto	l822
   975   002104                     u70:
   976   002104                     
   977                           ;newmain.c: 81:                 key = 6;
   978   002104  0E06               	movlw	6
   979   002106  6E18               	movwf	_key^0,c
   980   002108                     
   981                           ;newmain.c: 82:                 _delay((unsigned long)((10)*(4000000/4000.0)));
   982   002108  0E0D               	movlw	13
   983   00210A  6E01               	movwf	??_getKeypress^0,c
   984   00210C  0EFC               	movlw	252
   985   00210E                     u597:
   986   00210E  2EE8               	decfsz	wreg,f,c
   987   002110  D7FE               	bra	u597
   988   002112  2E01               	decfsz	??_getKeypress^0,f,c
   989   002114  D7FC               	bra	u597
   990   002116                     l822:
   991                           
   992                           ;newmain.c: 85:             if (PORTB == 0x82){
   993   002116  0E82               	movlw	130
   994   002118  18CB               	xorwf	203,w,c	;volatile
   995   00211A  A4D8               	btfss	status,2,c
   996   00211C  EF92  F010         	goto	u81
   997   002120  EF94  F010         	goto	u80
   998   002124                     u81:
   999   002124  EF9D  F010         	goto	l828
  1000   002128                     u80:
  1001   002128                     
  1002                           ;newmain.c: 86:                 key = 3;
  1003   002128  0E03               	movlw	3
  1004   00212A  6E18               	movwf	_key^0,c
  1005   00212C                     
  1006                           ;newmain.c: 87:                 _delay((unsigned long)((10)*(4000000/4000.0)));
  1007   00212C  0E0D               	movlw	13
  1008   00212E  6E01               	movwf	??_getKeypress^0,c
  1009   002130  0EFC               	movlw	252
  1010   002132                     u607:
  1011   002132  2EE8               	decfsz	wreg,f,c
  1012   002134  D7FE               	bra	u607
  1013   002136  2E01               	decfsz	??_getKeypress^0,f,c
  1014   002138  D7FC               	bra	u607
  1015   00213A                     l828:
  1016                           
  1017                           ;newmain.c: 91:     PORTB = 0x04;
  1018   00213A  0E04               	movlw	4
  1019   00213C  6ECB               	movwf	203,c	;volatile
  1020                           
  1021                           ;newmain.c: 92:     _delay((unsigned long)((10)*(4000000/4000.0)));
  1022   00213E  0E0D               	movlw	13
  1023   002140  6E01               	movwf	??_getKeypress^0,c
  1024   002142  0EFC               	movlw	252
  1025   002144                     u617:
  1026   002144  2EE8               	decfsz	wreg,f,c
  1027   002146  D7FE               	bra	u617
  1028   002148  2E01               	decfsz	??_getKeypress^0,f,c
  1029   00214A  D7FC               	bra	u617
  1030   00214C                     
  1031                           ;newmain.c: 95:             if (PORTB == 0x14){
  1032   00214C  0E14               	movlw	20
  1033   00214E  18CB               	xorwf	203,w,c	;volatile
  1034   002150  A4D8               	btfss	status,2,c
  1035   002152  EFAD  F010         	goto	u91
  1036   002156  EFAF  F010         	goto	u90
  1037   00215A                     u91:
  1038   00215A  EFB8  F010         	goto	l836
  1039   00215E                     u90:
  1040   00215E                     
  1041                           ;newmain.c: 96:                 key = 0;
  1042   00215E  0E00               	movlw	0
  1043   002160  6E18               	movwf	_key^0,c
  1044   002162                     
  1045                           ;newmain.c: 97:                 _delay((unsigned long)((10)*(4000000/4000.0)));
  1046   002162  0E0D               	movlw	13
  1047   002164  6E01               	movwf	??_getKeypress^0,c
  1048   002166  0EFC               	movlw	252
  1049   002168                     u627:
  1050   002168  2EE8               	decfsz	wreg,f,c
  1051   00216A  D7FE               	bra	u627
  1052   00216C  2E01               	decfsz	??_getKeypress^0,f,c
  1053   00216E  D7FC               	bra	u627
  1054   002170                     l836:
  1055                           
  1056                           ;newmain.c: 100:             if (PORTB == 0x24){
  1057   002170  0E24               	movlw	36
  1058   002172  18CB               	xorwf	203,w,c	;volatile
  1059   002174  A4D8               	btfss	status,2,c
  1060   002176  EFBF  F010         	goto	u101
  1061   00217A  EFC1  F010         	goto	u100
  1062   00217E                     u101:
  1063   00217E  EFCA  F010         	goto	l842
  1064   002182                     u100:
  1065   002182                     
  1066                           ;newmain.c: 101:                 key = 8;
  1067   002182  0E08               	movlw	8
  1068   002184  6E18               	movwf	_key^0,c
  1069   002186                     
  1070                           ;newmain.c: 102:                 _delay((unsigned long)((10)*(4000000/4000.0)));
  1071   002186  0E0D               	movlw	13
  1072   002188  6E01               	movwf	??_getKeypress^0,c
  1073   00218A  0EFC               	movlw	252
  1074   00218C                     u637:
  1075   00218C  2EE8               	decfsz	wreg,f,c
  1076   00218E  D7FE               	bra	u637
  1077   002190  2E01               	decfsz	??_getKeypress^0,f,c
  1078   002192  D7FC               	bra	u637
  1079   002194                     l842:
  1080                           
  1081                           ;newmain.c: 105:             if (PORTB == 0x44){
  1082   002194  0E44               	movlw	68
  1083   002196  18CB               	xorwf	203,w,c	;volatile
  1084   002198  A4D8               	btfss	status,2,c
  1085   00219A  EFD1  F010         	goto	u111
  1086   00219E  EFD3  F010         	goto	u110
  1087   0021A2                     u111:
  1088   0021A2  EFDC  F010         	goto	l848
  1089   0021A6                     u110:
  1090   0021A6                     
  1091                           ;newmain.c: 106:                 key = 5;
  1092   0021A6  0E05               	movlw	5
  1093   0021A8  6E18               	movwf	_key^0,c
  1094   0021AA                     
  1095                           ;newmain.c: 107:                 _delay((unsigned long)((10)*(4000000/4000.0)));
  1096   0021AA  0E0D               	movlw	13
  1097   0021AC  6E01               	movwf	??_getKeypress^0,c
  1098   0021AE  0EFC               	movlw	252
  1099   0021B0                     u647:
  1100   0021B0  2EE8               	decfsz	wreg,f,c
  1101   0021B2  D7FE               	bra	u647
  1102   0021B4  2E01               	decfsz	??_getKeypress^0,f,c
  1103   0021B6  D7FC               	bra	u647
  1104   0021B8                     l848:
  1105                           
  1106                           ;newmain.c: 110:             if (PORTB == 0x84){
  1107   0021B8  0E84               	movlw	132
  1108   0021BA  18CB               	xorwf	203,w,c	;volatile
  1109   0021BC  A4D8               	btfss	status,2,c
  1110   0021BE  EFE3  F010         	goto	u121
  1111   0021C2  EFE5  F010         	goto	u120
  1112   0021C6                     u121:
  1113   0021C6  EFEE  F010         	goto	l854
  1114   0021CA                     u120:
  1115   0021CA                     
  1116                           ;newmain.c: 111:                 key = 2;
  1117   0021CA  0E02               	movlw	2
  1118   0021CC  6E18               	movwf	_key^0,c
  1119   0021CE                     
  1120                           ;newmain.c: 112:                 _delay((unsigned long)((10)*(4000000/4000.0)));
  1121   0021CE  0E0D               	movlw	13
  1122   0021D0  6E01               	movwf	??_getKeypress^0,c
  1123   0021D2  0EFC               	movlw	252
  1124   0021D4                     u657:
  1125   0021D4  2EE8               	decfsz	wreg,f,c
  1126   0021D6  D7FE               	bra	u657
  1127   0021D8  2E01               	decfsz	??_getKeypress^0,f,c
  1128   0021DA  D7FC               	bra	u657
  1129   0021DC                     l854:
  1130                           
  1131                           ;newmain.c: 116:     PORTB = 0x08;
  1132   0021DC  0E08               	movlw	8
  1133   0021DE  6ECB               	movwf	203,c	;volatile
  1134                           
  1135                           ;newmain.c: 117:     _delay((unsigned long)((10)*(4000000/4000.0)));
  1136   0021E0  0E0D               	movlw	13
  1137   0021E2  6E01               	movwf	??_getKeypress^0,c
  1138   0021E4  0EFC               	movlw	252
  1139   0021E6                     u667:
  1140   0021E6  2EE8               	decfsz	wreg,f,c
  1141   0021E8  D7FE               	bra	u667
  1142   0021EA  2E01               	decfsz	??_getKeypress^0,f,c
  1143   0021EC  D7FC               	bra	u667
  1144   0021EE                     
  1145                           ;newmain.c: 120:             if (PORTB == 0x18){
  1146   0021EE  0E18               	movlw	24
  1147   0021F0  18CB               	xorwf	203,w,c	;volatile
  1148   0021F2  A4D8               	btfss	status,2,c
  1149   0021F4  EFFE  F010         	goto	u131
  1150   0021F8  EF00  F011         	goto	u130
  1151   0021FC                     u131:
  1152   0021FC  EF09  F011         	goto	l862
  1153   002200                     u130:
  1154   002200                     
  1155                           ;newmain.c: 121:                 key = 0x0E;
  1156   002200  0E0E               	movlw	14
  1157   002202  6E18               	movwf	_key^0,c
  1158   002204                     
  1159                           ;newmain.c: 122:                 _delay((unsigned long)((10)*(4000000/4000.0)));
  1160   002204  0E0D               	movlw	13
  1161   002206  6E01               	movwf	??_getKeypress^0,c
  1162   002208  0EFC               	movlw	252
  1163   00220A                     u677:
  1164   00220A  2EE8               	decfsz	wreg,f,c
  1165   00220C  D7FE               	bra	u677
  1166   00220E  2E01               	decfsz	??_getKeypress^0,f,c
  1167   002210  D7FC               	bra	u677
  1168   002212                     l862:
  1169                           
  1170                           ;newmain.c: 125:             if (PORTB == 0x28){
  1171   002212  0E28               	movlw	40
  1172   002214  18CB               	xorwf	203,w,c	;volatile
  1173   002216  A4D8               	btfss	status,2,c
  1174   002218  EF10  F011         	goto	u141
  1175   00221C  EF12  F011         	goto	u140
  1176   002220                     u141:
  1177   002220  EF1B  F011         	goto	l868
  1178   002224                     u140:
  1179   002224                     
  1180                           ;newmain.c: 126:                 key = 7;
  1181   002224  0E07               	movlw	7
  1182   002226  6E18               	movwf	_key^0,c
  1183   002228                     
  1184                           ;newmain.c: 127:                 _delay((unsigned long)((10)*(4000000/4000.0)));
  1185   002228  0E0D               	movlw	13
  1186   00222A  6E01               	movwf	??_getKeypress^0,c
  1187   00222C  0EFC               	movlw	252
  1188   00222E                     u687:
  1189   00222E  2EE8               	decfsz	wreg,f,c
  1190   002230  D7FE               	bra	u687
  1191   002232  2E01               	decfsz	??_getKeypress^0,f,c
  1192   002234  D7FC               	bra	u687
  1193   002236                     l868:
  1194                           
  1195                           ;newmain.c: 130:             if (PORTB == 0x48){
  1196   002236  0E48               	movlw	72
  1197   002238  18CB               	xorwf	203,w,c	;volatile
  1198   00223A  A4D8               	btfss	status,2,c
  1199   00223C  EF22  F011         	goto	u151
  1200   002240  EF24  F011         	goto	u150
  1201   002244                     u151:
  1202   002244  EF2D  F011         	goto	l874
  1203   002248                     u150:
  1204   002248                     
  1205                           ;newmain.c: 131:                 key = 4;
  1206   002248  0E04               	movlw	4
  1207   00224A  6E18               	movwf	_key^0,c
  1208   00224C                     
  1209                           ;newmain.c: 132:                 _delay((unsigned long)((10)*(4000000/4000.0)));
  1210   00224C  0E0D               	movlw	13
  1211   00224E  6E01               	movwf	??_getKeypress^0,c
  1212   002250  0EFC               	movlw	252
  1213   002252                     u697:
  1214   002252  2EE8               	decfsz	wreg,f,c
  1215   002254  D7FE               	bra	u697
  1216   002256  2E01               	decfsz	??_getKeypress^0,f,c
  1217   002258  D7FC               	bra	u697
  1218   00225A                     l874:
  1219                           
  1220                           ;newmain.c: 135:             if (PORTB == 0x88){
  1221   00225A  0E88               	movlw	136
  1222   00225C  18CB               	xorwf	203,w,c	;volatile
  1223   00225E  A4D8               	btfss	status,2,c
  1224   002260  EF34  F011         	goto	u161
  1225   002264  EF36  F011         	goto	u160
  1226   002268                     u161:
  1227   002268  EF3F  F011         	goto	l880
  1228   00226C                     u160:
  1229   00226C                     
  1230                           ;newmain.c: 136:                 key = 1;
  1231   00226C  0E01               	movlw	1
  1232   00226E  6E18               	movwf	_key^0,c
  1233   002270                     
  1234                           ;newmain.c: 137:                 _delay((unsigned long)((10)*(4000000/4000.0)));
  1235   002270  0E0D               	movlw	13
  1236   002272  6E01               	movwf	??_getKeypress^0,c
  1237   002274  0EFC               	movlw	252
  1238   002276                     u707:
  1239   002276  2EE8               	decfsz	wreg,f,c
  1240   002278  D7FE               	bra	u707
  1241   00227A  2E01               	decfsz	??_getKeypress^0,f,c
  1242   00227C  D7FC               	bra	u707
  1243   00227E                     l880:
  1244                           
  1245                           ;newmain.c: 141:     return key;
  1246   00227E  5018               	movf	_key^0,w,c
  1247   002280  0012               	return		;funcret
  1248   002282                     __end_of_getKeypress:
  1249                           	callstack 0
  1250                           
  1251 ;; *************** function _evaluate *****************
  1252 ;; Defined at:
  1253 ;;		line 196 in file "newmain.c"
  1254 ;; Parameters:    Size  Location     Type
  1255 ;;  input_X         2    8[COMRAM] int 
  1256 ;;  input_Y         2   10[COMRAM] int 
  1257 ;;  Operation       2   12[COMRAM] int 
  1258 ;; Auto vars:     Size  Location     Type
  1259 ;;  result          1   16[COMRAM] unsigned char 
  1260 ;; Return value:  Size  Location     Type
  1261 ;;                  1    wreg      unsigned char 
  1262 ;; Registers used:
  1263 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1264 ;; Tracked objects:
  1265 ;;		On entry : 0/0
  1266 ;;		On exit  : 0/0
  1267 ;;		Unchanged: 0/0
  1268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  1269 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1270 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1271 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1272 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1273 ;;Total ram usage:        9 bytes
  1274 ;; Hardware stack levels used: 1
  1275 ;; Hardware stack levels required when called: 1
  1276 ;; This function calls:
  1277 ;;		___awdiv
  1278 ;; This function is called by:
  1279 ;;		_main
  1280 ;; This function uses a non-reentrant model
  1281 ;;
  1282                           
  1283                           	psect	text5
  1284   002454                     __ptext5:
  1285                           	callstack 0
  1286   002454                     _evaluate:
  1287                           	callstack 29
  1288   002454                     
  1289                           ;newmain.c: 199:     switch (Operation)
  1290   002454  EF4E  F012         	goto	l1166
  1291   002458                     l1140:
  1292                           
  1293                           ;newmain.c: 202:                 result = input_X + input_Y;
  1294   002458  5009               	movf	evaluate@input_X^0,w,c
  1295   00245A  240B               	addwf	evaluate@input_Y^0,w,c
  1296   00245C  6E11               	movwf	evaluate@result^0,c
  1297   00245E                     l1142:
  1298                           
  1299                           ;newmain.c: 203:                 return result;
  1300   00245E  5011               	movf	evaluate@result^0,w,c
  1301   002460  EF6D  F012         	goto	l76
  1302   002464                     l1146:
  1303                           
  1304                           ;newmain.c: 205:                 result = input_X - input_Y;
  1305   002464  500B               	movf	evaluate@input_Y^0,w,c
  1306   002466  5C09               	subwf	evaluate@input_X^0,w,c
  1307   002468  6E11               	movwf	evaluate@result^0,c
  1308   00246A  EF2F  F012         	goto	l1142
  1309   00246E                     l1152:
  1310                           
  1311                           ;newmain.c: 208:                 result = input_X * input_Y;
  1312   00246E  5009               	movf	evaluate@input_X^0,w,c
  1313   002470  020B               	mulwf	evaluate@input_Y^0,c
  1314   002472  006F FFCC  F011    	movff	prodl,evaluate@result
  1315   002478  EF2F  F012         	goto	l1142
  1316   00247C                     l1158:
  1317                           
  1318                           ;newmain.c: 211:                 result = input_X / input_Y;
  1319   00247C  C009  F001         	movff	evaluate@input_X,___awdiv@dividend
  1320   002480  C00A  F002         	movff	evaluate@input_X+1,___awdiv@dividend+1
  1321   002484  C00B  F003         	movff	evaluate@input_Y,___awdiv@divisor
  1322   002488  C00C  F004         	movff	evaluate@input_Y+1,___awdiv@divisor+1
  1323   00248C  ECC8  F011         	call	___awdiv	;wreg free
  1324   002490  5001               	movf	?___awdiv^0,w,c
  1325   002492  6E11               	movwf	evaluate@result^0,c
  1326   002494  EF2F  F012         	goto	l1142
  1327   002498                     l1164:
  1328                           
  1329                           ;newmain.c: 215:     }
  1330   002498  EF6C  F012         	goto	l1168
  1331   00249C                     l1166:
  1332   00249C  C00D  F00F         	movff	evaluate@Operation,??_evaluate
  1333   0024A0  C00E  F010         	movff	evaluate@Operation+1,??_evaluate+1
  1334                           
  1335                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1336                           ; Switch size 1, requested type "simple"
  1337                           ; Number of cases is 1, Range of values is 0 to 0
  1338                           ; switch strategies available:
  1339                           ; Name         Instructions Cycles
  1340                           ; simple_byte            4     3 (average)
  1341                           ;	Chosen strategy is simple_byte
  1342   0024A4  5010               	movf	(??_evaluate+1)^0,w,c
  1343   0024A6  0A00               	xorlw	0	; case 0
  1344   0024A8  B4D8               	btfsc	status,2,c
  1345   0024AA  EF59  F012         	goto	l1240
  1346   0024AE  EF4C  F012         	goto	l1164
  1347   0024B2                     l1240:
  1348                           
  1349                           ; Switch size 1, requested type "simple"
  1350                           ; Number of cases is 4, Range of values is 10 to 13
  1351                           ; switch strategies available:
  1352                           ; Name         Instructions Cycles
  1353                           ; simple_byte           13     7 (average)
  1354                           ;	Chosen strategy is simple_byte
  1355   0024B2  500F               	movf	??_evaluate^0,w,c
  1356   0024B4  0A0A               	xorlw	10	; case 10
  1357   0024B6  B4D8               	btfsc	status,2,c
  1358   0024B8  EF2C  F012         	goto	l1140
  1359   0024BC  0A01               	xorlw	1	; case 11
  1360   0024BE  B4D8               	btfsc	status,2,c
  1361   0024C0  EF32  F012         	goto	l1146
  1362   0024C4  0A07               	xorlw	7	; case 12
  1363   0024C6  B4D8               	btfsc	status,2,c
  1364   0024C8  EF37  F012         	goto	l1152
  1365   0024CC  0A01               	xorlw	1	; case 13
  1366   0024CE  B4D8               	btfsc	status,2,c
  1367   0024D0  EF3E  F012         	goto	l1158
  1368   0024D4  EF4C  F012         	goto	l1164
  1369   0024D8                     l1168:
  1370                           
  1371                           ;newmain.c: 216:     return result;
  1372   0024D8  0E00               	movlw	0
  1373   0024DA                     l76:
  1374   0024DA  0012               	return		;funcret
  1375   0024DC                     __end_of_evaluate:
  1376                           	callstack 0
  1377                           
  1378 ;; *************** function ___awdiv *****************
  1379 ;; Defined at:
  1380 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  1381 ;; Parameters:    Size  Location     Type
  1382 ;;  dividend        2    0[COMRAM] int 
  1383 ;;  divisor         2    2[COMRAM] int 
  1384 ;; Auto vars:     Size  Location     Type
  1385 ;;  quotient        2    6[COMRAM] int 
  1386 ;;  sign            1    5[COMRAM] unsigned char 
  1387 ;;  counter         1    4[COMRAM] unsigned char 
  1388 ;; Return value:  Size  Location     Type
  1389 ;;                  2    0[COMRAM] int 
  1390 ;; Registers used:
  1391 ;;		wreg, status,2, status,0
  1392 ;; Tracked objects:
  1393 ;;		On entry : 0/0
  1394 ;;		On exit  : 0/0
  1395 ;;		Unchanged: 0/0
  1396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  1397 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1398 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1400 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1401 ;;Total ram usage:        8 bytes
  1402 ;; Hardware stack levels used: 1
  1403 ;; This function calls:
  1404 ;;		Nothing
  1405 ;; This function is called by:
  1406 ;;		_evaluate
  1407 ;; This function uses a non-reentrant model
  1408 ;;
  1409                           
  1410                           	psect	text6
  1411   002390                     __ptext6:
  1412                           	callstack 0
  1413   002390                     ___awdiv:
  1414                           	callstack 29
  1415   002390  0E00               	movlw	0
  1416   002392  6E06               	movwf	___awdiv@sign^0,c
  1417   002394  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1418   002396  EFD1  F011         	goto	u310
  1419   00239A  EFCF  F011         	goto	u311
  1420   00239E                     u311:
  1421   00239E  EFD7  F011         	goto	l1102
  1422   0023A2                     u310:
  1423   0023A2  6C03               	negf	___awdiv@divisor^0,c
  1424   0023A4  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  1425   0023A6  B0D8               	btfsc	status,0,c
  1426   0023A8  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  1427   0023AA  0E01               	movlw	1
  1428   0023AC  6E06               	movwf	___awdiv@sign^0,c
  1429   0023AE                     l1102:
  1430   0023AE  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  1431   0023B0  EFDE  F011         	goto	u320
  1432   0023B4  EFDC  F011         	goto	u321
  1433   0023B8                     u321:
  1434   0023B8  EFE4  F011         	goto	l1108
  1435   0023BC                     u320:
  1436   0023BC  6C01               	negf	___awdiv@dividend^0,c
  1437   0023BE  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  1438   0023C0  B0D8               	btfsc	status,0,c
  1439   0023C2  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  1440   0023C4  0E01               	movlw	1
  1441   0023C6  1A06               	xorwf	___awdiv@sign^0,f,c
  1442   0023C8                     l1108:
  1443   0023C8  0E00               	movlw	0
  1444   0023CA  6E08               	movwf	(___awdiv@quotient+1)^0,c
  1445   0023CC  0E00               	movlw	0
  1446   0023CE  6E07               	movwf	___awdiv@quotient^0,c
  1447   0023D0  5003               	movf	___awdiv@divisor^0,w,c
  1448   0023D2  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  1449   0023D4  B4D8               	btfsc	status,2,c
  1450   0023D6  EFEF  F011         	goto	u331
  1451   0023DA  EFF1  F011         	goto	u330
  1452   0023DE                     u331:
  1453   0023DE  EF19  F012         	goto	l1130
  1454   0023E2                     u330:
  1455   0023E2  0E01               	movlw	1
  1456   0023E4  6E05               	movwf	___awdiv@counter^0,c
  1457   0023E6  EFF9  F011         	goto	l1116
  1458   0023EA                     l1114:
  1459   0023EA  90D8               	bcf	status,0,c
  1460   0023EC  3603               	rlcf	___awdiv@divisor^0,f,c
  1461   0023EE  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  1462   0023F0  2A05               	incf	___awdiv@counter^0,f,c
  1463   0023F2                     l1116:
  1464   0023F2  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  1465   0023F4  EFFE  F011         	goto	u341
  1466   0023F8  EF00  F012         	goto	u340
  1467   0023FC                     u341:
  1468   0023FC  EFF5  F011         	goto	l1114
  1469   002400                     u340:
  1470   002400                     l1118:
  1471   002400  90D8               	bcf	status,0,c
  1472   002402  3607               	rlcf	___awdiv@quotient^0,f,c
  1473   002404  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  1474   002406  5003               	movf	___awdiv@divisor^0,w,c
  1475   002408  5C01               	subwf	___awdiv@dividend^0,w,c
  1476   00240A  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1477   00240C  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  1478   00240E  A0D8               	btfss	status,0,c
  1479   002410  EF0C  F012         	goto	u351
  1480   002414  EF0E  F012         	goto	u350
  1481   002418                     u351:
  1482   002418  EF13  F012         	goto	l1126
  1483   00241C                     u350:
  1484   00241C  5003               	movf	___awdiv@divisor^0,w,c
  1485   00241E  5E01               	subwf	___awdiv@dividend^0,f,c
  1486   002420  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1487   002422  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  1488   002424  8007               	bsf	___awdiv@quotient^0,0,c
  1489   002426                     l1126:
  1490   002426  90D8               	bcf	status,0,c
  1491   002428  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  1492   00242A  3203               	rrcf	___awdiv@divisor^0,f,c
  1493   00242C  2E05               	decfsz	___awdiv@counter^0,f,c
  1494   00242E  EF00  F012         	goto	l1118
  1495   002432                     l1130:
  1496   002432  5006               	movf	___awdiv@sign^0,w,c
  1497   002434  B4D8               	btfsc	status,2,c
  1498   002436  EF1F  F012         	goto	u361
  1499   00243A  EF21  F012         	goto	u360
  1500   00243E                     u361:
  1501   00243E  EF25  F012         	goto	l1134
  1502   002442                     u360:
  1503   002442  6C07               	negf	___awdiv@quotient^0,c
  1504   002444  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  1505   002446  B0D8               	btfsc	status,0,c
  1506   002448  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  1507   00244A                     l1134:
  1508   00244A  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1509   00244E  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1510   002452  0012               	return		;funcret
  1511   002454                     __end_of___awdiv:
  1512                           	callstack 0
  1513                           
  1514 ;; *************** function _display *****************
  1515 ;; Defined at:
  1516 ;;		line 219 in file "newmain.c"
  1517 ;; Parameters:    Size  Location     Type
  1518 ;;  Result          1    wreg     unsigned char 
  1519 ;; Auto vars:     Size  Location     Type
  1520 ;;  Result          1    0[COMRAM] unsigned char 
  1521 ;; Return value:  Size  Location     Type
  1522 ;;                  1    wreg      void 
  1523 ;; Registers used:
  1524 ;;		wreg
  1525 ;; Tracked objects:
  1526 ;;		On entry : 0/0
  1527 ;;		On exit  : 0/0
  1528 ;;		Unchanged: 0/0
  1529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  1530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1531 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1533 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1534 ;;Total ram usage:        1 bytes
  1535 ;; Hardware stack levels used: 1
  1536 ;; This function calls:
  1537 ;;		Nothing
  1538 ;; This function is called by:
  1539 ;;		_main
  1540 ;; This function uses a non-reentrant model
  1541 ;;
  1542                           
  1543                           	psect	text7
  1544   00262A                     __ptext7:
  1545                           	callstack 0
  1546   00262A                     _display:
  1547                           	callstack 30
  1548                           
  1549                           ;incstack = 0
  1550                           ;display@Result stored from wreg
  1551   00262A  6E01               	movwf	display@Result^0,c
  1552   00262C                     
  1553                           ;newmain.c: 219: void display(unsigned char Result);newmain.c: 220: {;newmain.c: 221:   
      +                            PORTD = Result;
  1554   00262C  0060  F007  FFCD   	movff	display@Result,16333	;volatile
  1555   002632  0012               	return		;funcret
  1556   002634                     __end_of_display:
  1557                           	callstack 0
  1558                           
  1559                           	psect	smallconst
  1560   002000                     __psmallconst:
  1561                           	callstack 0
  1562   002000  00                 	db	0
  1563   002001  00                 	db	0	; dummy byte at the end
  1564   000000                     
  1565                           	psect	rparam
  1566   000000                     
  1567                           	psect	config
  1568                           
  1569                           ;Config register CONFIG1L @ 0x300000
  1570                           ;	External Oscillator Selection
  1571                           ;	FEXTOSC = LP, LP (crystal oscillator) optimized for 32.768 kHz; PFM set to low power
  1572                           ;	Reset Oscillator Selection
  1573                           ;	RSTOSC = EXTOSC, EXTOSC operating per FEXTOSC bits (device manufacturing default)
  1574   300000                     	org	3145728
  1575   300000  F8                 	db	248
  1576                           
  1577                           ;Config register CONFIG1H @ 0x300001
  1578                           ;	Clock out Enable bit
  1579                           ;	CLKOUTEN = OFF, CLKOUT function is disabled
  1580                           ;	PRLOCKED One-Way Set Enable bit
  1581                           ;	PR1WAY = ON, PRLOCK bit can be cleared and set only once
  1582                           ;	Clock Switch Enable bit
  1583                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
  1584                           ;	Fail-Safe Clock Monitor Enable bit
  1585                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  1586   300001                     	org	3145729
  1587   300001  FF                 	db	255
  1588                           
  1589                           ;Config register CONFIG2L @ 0x300002
  1590                           ;	MCLR Enable bit
  1591                           ;	MCLRE = EXTMCLR, If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR
  1592                           ;	Power-up timer selection bits
  1593                           ;	PWRTS = PWRT_OFF, PWRT is disabled
  1594                           ;	Multi-vector enable bit
  1595                           ;	MVECEN = ON, Multi-vector enabled, Vector table used for interrupts
  1596                           ;	IVTLOCK bit One-way set enable bit
  1597                           ;	IVT1WAY = ON, IVTLOCK bit can be cleared and set only once
  1598                           ;	Low Power BOR Enable bit
  1599                           ;	LPBOREN = OFF, ULPBOR disabled
  1600                           ;	Brown-out Reset Enable bits
  1601                           ;	BOREN = SBORDIS, Brown-out Reset enabled , SBOREN bit is ignored
  1602   300002                     	org	3145730
  1603   300002  FF                 	db	255
  1604                           
  1605                           ;Config register CONFIG2H @ 0x300003
  1606                           ;	Brown-out Reset Voltage Selection bits
  1607                           ;	BORV = VBOR_2P45, Brown-out Reset Voltage (VBOR) set to 2.45V
  1608                           ;	ZCD Disable bit
  1609                           ;	ZCD = OFF, ZCD disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON
  1610                           ;	PPSLOCK bit One-Way Set Enable bit
  1611                           ;	PPS1WAY = ON, PPSLOCK bit can be cleared and set only once; PPS registers remain locke
      +                          d after one clear/set cycle
  1612                           ;	Stack Full/Underflow Reset Enable bit
  1613                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1614                           ;	Debugger Enable bit
  1615                           ;	DEBUG = OFF, Background debugger disabled
  1616                           ;	Extended Instruction Set Enable bit
  1617                           ;	XINST = OFF, Extended Instruction Set and Indexed Addressing Mode disabled
  1618   300003                     	org	3145731
  1619   300003  FF                 	db	255
  1620                           
  1621                           ;Config register CONFIG3L @ 0x300004
  1622                           ;	WDT Period selection bits
  1623                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  1624                           ;	WDT operating mode
  1625                           ;	WDTE = OFF, WDT Disabled; SWDTEN is ignored
  1626   300004                     	org	3145732
  1627   300004  9F                 	db	159
  1628                           
  1629                           ;Config register CONFIG3H @ 0x300005
  1630                           ;	WDT Window Select bits
  1631                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
  1632                           ;	WDT input clock selector
  1633                           ;	WDTCCS = SC, Software Control
  1634   300005                     	org	3145733
  1635   300005  FF                 	db	255
  1636                           
  1637                           ;Config register CONFIG4L @ 0x300006
  1638                           ;	Boot Block Size selection bits
  1639                           ;	BBSIZE = BBSIZE_512, Boot Block size is 512 words
  1640                           ;	Boot Block enable bit
  1641                           ;	BBEN = OFF, Boot block disabled
  1642                           ;	Storage Area Flash enable bit
  1643                           ;	SAFEN = OFF, SAF disabled
  1644                           ;	Application Block write protection bit
  1645                           ;	WRTAPP = OFF, Application Block not write protected
  1646   300006                     	org	3145734
  1647   300006  FF                 	db	255
  1648                           
  1649                           ;Config register CONFIG4H @ 0x300007
  1650                           ;	Boot Block Write Protection bit
  1651                           ;	WRTB = OFF, Boot Block not write-protected
  1652                           ;	Configuration Register Write Protection bit
  1653                           ;	WRTC = OFF, Configuration registers not write-protected
  1654                           ;	Data EEPROM Write Protection bit
  1655                           ;	WRTD = OFF, Data EEPROM not write-protected
  1656                           ;	SAF Write protection bit
  1657                           ;	WRTSAF = OFF, SAF not Write Protected
  1658                           ;	Low Voltage Programming Enable bit
  1659                           ;	LVP = ON, Low voltage programming enabled. MCLR/VPP pin function is MCLR. MCLRE config
      +                          uration bit is ignored
  1660   300007                     	org	3145735
  1661   300007  FF                 	db	255
  1662                           
  1663                           ;Config register CONFIG5L @ 0x300008
  1664                           ;	PFM and Data EEPROM Code Protection bit
  1665                           ;	CP = OFF, PFM and Data EEPROM code protection disabled
  1666   300008                     	org	3145736
  1667   300008  FF                 	db	255
  1668                           
  1669                           ;Config register CONFIG5H @ 0x300009
  1670                           ;	unspecified, using default values
  1671   300009                     	org	3145737
  1672   300009  FF                 	db	255
  1673                           tosu	equ	0x3FFF
  1674                           tosh	equ	0x3FFE
  1675                           tosl	equ	0x3FFD
  1676                           stkptr	equ	0x3FFC
  1677                           pclatu	equ	0x3FFB
  1678                           pclath	equ	0x3FFA
  1679                           pcl	equ	0x3FF9
  1680                           tblptru	equ	0x3FF8
  1681                           tblptrh	equ	0x3FF7
  1682                           tblptrl	equ	0x3FF6
  1683                           tablat	equ	0x3FF5
  1684                           prodh	equ	0x3FF4
  1685                           prodl	equ	0x3FF3
  1686                           indf0	equ	0x3FEF
  1687                           postinc0	equ	0x3FEE
  1688                           postdec0	equ	0x3FED
  1689                           preinc0	equ	0x3FEC
  1690                           plusw0	equ	0x3FEB
  1691                           fsr0h	equ	0x3FEA
  1692                           fsr0l	equ	0x3FE9
  1693                           wreg	equ	0x3FE8
  1694                           indf1	equ	0x3FE7
  1695                           postinc1	equ	0x3FE6
  1696                           postdec1	equ	0x3FE5
  1697                           preinc1	equ	0x3FE4
  1698                           plusw1	equ	0x3FE3
  1699                           fsr1h	equ	0x3FE2
  1700                           fsr1l	equ	0x3FE1
  1701                           bsr	equ	0x3FE0
  1702                           indf2	equ	0x3FDF
  1703                           postinc2	equ	0x3FDE
  1704                           postdec2	equ	0x3FDD
  1705                           preinc2	equ	0x3FDC
  1706                           plusw2	equ	0x3FDB
  1707                           fsr2h	equ	0x3FDA
  1708                           fsr2l	equ	0x3FD9
  1709                           status	equ	0x3FD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     19      24
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          256      0       0
    BANK16          256      0       0
    BANK17          256      0       0
    BANK18          256      0       0
    BANK19          256      0       0
    BANK20          256      0       0
    BANK21          256      0       0
    BANK22          256      0       0
    BANK23          256      0       0
    BANK24          256      0       0
    BANK25          256      0       0
    BANK26          256      0       0
    BANK27          256      0       0
    BANK28          256      0       0
    BANK29          256      0       0
    BANK30          256      0       0
    BANK31          256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_evaluate
    _getInputY->_getKeypress
    _getInputX->_getKeypress
    _getInputOperation->_getKeypress
    _evaluate->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _main in BANK26

    None.

Critical Paths under _main in BANK27

    None.

Critical Paths under _main in BANK28

    None.

Critical Paths under _main in BANK29

    None.

Critical Paths under _main in BANK30

    None.

Critical Paths under _main in BANK31

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1009
                                             17 COMRAM     2     2      0
                            _display
                           _evaluate
                  _getInputOperation
                          _getInputX
                          _getInputY
                        _getKeypress
 ---------------------------------------------------------------------------------
 (1) _getInputY                                            2     2      0       0
                                              1 COMRAM     2     2      0
                        _getKeypress
 ---------------------------------------------------------------------------------
 (1) _getInputX                                            2     2      0       0
                                              1 COMRAM     2     2      0
                        _getKeypress
 ---------------------------------------------------------------------------------
 (1) _getInputOperation                                    1     1      0       0
                                              1 COMRAM     1     1      0
                        _getKeypress
 ---------------------------------------------------------------------------------
 (1) _getKeypress                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _evaluate                                             9     3      6     994
                                              8 COMRAM     9     3      6
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _display                                              1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _display
   _evaluate
     ___awdiv
   _getInputOperation
     _getKeypress
   _getInputX
     _getKeypress
   _getInputY
     _getKeypress
   _getKeypress

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM            1FFF      0       0      78        0.0%
BITBIGSFRlllhh     54A      0       0      75        0.0%
EEDATA             400      0       0       0        0.0%
BITBIGSFRllll      250      0       0      77        0.0%
BITBANK31          100      0       0      67        0.0%
BANK31             100      0       0      68        0.0%
BITBANK30          100      0       0      65        0.0%
BANK30             100      0       0      66        0.0%
BITBANK29          100      0       0      63        0.0%
BANK29             100      0       0      64        0.0%
BITBANK28          100      0       0      61        0.0%
BANK28             100      0       0      62        0.0%
BITBANK27          100      0       0      59        0.0%
BANK27             100      0       0      60        0.0%
BITBANK26          100      0       0      57        0.0%
BANK26             100      0       0      58        0.0%
BITBANK25          100      0       0      55        0.0%
BANK25             100      0       0      56        0.0%
BITBANK24          100      0       0      53        0.0%
BANK24             100      0       0      54        0.0%
BITBANK23          100      0       0      51        0.0%
BANK23             100      0       0      52        0.0%
BITBANK22          100      0       0      49        0.0%
BANK22             100      0       0      50        0.0%
BITBANK21          100      0       0      47        0.0%
BANK21             100      0       0      48        0.0%
BITBANK20          100      0       0      45        0.0%
BANK20             100      0       0      46        0.0%
BITBANK19          100      0       0      43        0.0%
BANK19             100      0       0      44        0.0%
BITBANK18          100      0       0      41        0.0%
BANK18             100      0       0      42        0.0%
BITBANK17          100      0       0      39        0.0%
BANK17             100      0       0      40        0.0%
BITBANK16          100      0       0      37        0.0%
BANK16             100      0       0      38        0.0%
BITBANK15          100      0       0      35        0.0%
BANK15             100      0       0      36        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     13      18       1       25.3%
BITBIGSFRhh         32      0       0      69        0.0%
BITBIGSFRlllhl      1F      0       0      76        0.0%
BITBIGSFRllhh        5      0       0      73        0.0%
BITBIGSFRlhh         5      0       0      71        0.0%
BITBIGSFRllhl        1      0       0      74        0.0%
BITBIGSFRlhl         1      0       0      72        0.0%
BITBIGSFRhl          1      0       0      70        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_8             0      0       0     200        0.0%
SFR_8                0      0       0     200        0.0%
BITSFR_7             0      0       0     200        0.0%
SFR_7                0      0       0     200        0.0%
BITSFR_6             0      0       0     200        0.0%
SFR_6                0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      18      16        0.0%
DATA                 0      0      18       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue Apr 09 18:06:04 2024

                       l70 2616                         l47 2280                         l71 261A  
                       l56 25D6                         l65 2558                         l84 2632  
                       l76 24DA                         u10 201A                         u11 2016  
                       u20 203E                         u21 203A                         u30 2062  
                       u31 205E                         u40 2086                         u41 2082  
                       u50 20BC                         u51 20B8                         u60 20E0  
                       u61 20DC                         u70 2104                         u71 2100  
                       u80 2128                         u81 2124                         u90 215E  
                       u91 215A               ___awdiv@sign 0006                        l332 2452  
                      l800 208A                        l810 20CE                        l802 2098  
                      l820 2108                        l812 20E0                        l804 20AA  
                      l830 214C                        l822 2116                        l814 20E4  
                      l806 20BC                        l840 2186                        l832 215E  
                      l824 2128                        l816 20F2                        l808 20C0  
                      l850 21CA                        l842 2194                        l834 2162  
                      l826 212C                        l818 2104                        l930 255A  
                      l860 2204                        l852 21CE                        l844 21A6  
                      l836 2170                        l828 213A                        l780 201A  
                      l940 2588                        l932 255E                        l870 2248  
                      l862 2212                        l854 21DC                        l846 21AA  
                      l838 2182                        l790 2050                        l782 201E  
                      l774 2002                        l950 25C2                        l942 25A0  
                      l934 2564                        l880 227E                        l872 224C  
                      l864 2224                        l856 21EE                        l848 21B8  
                      l792 2062                        l784 202C                        l776 2004  
                      l952 25D2                        l944 25A8                        l936 256A  
                      l960 24EC                        l874 225A                        l866 2228  
                      l858 2200                        l794 2066                        l786 203E  
                      l778 2008                        l946 25AE                        l938 2578  
                      l970 2530                        l962 24FA                        l954 24DC  
                      l876 226C                        l868 2236                        l796 2074  
                      l788 2042                        l980 25DC                        l948 25B4  
                      l972 2536                        l964 250A                        l956 24E0  
                      l878 2270                        l798 2086                        l982 25E2  
                      l974 2544                        l966 2522                        l958 24E6  
                      l984 25E8                        l976 2554                        l968 252A  
                      l986 25F6                        l978 25D8                        l988 2606  
                      u100 2182                        u101 217E                        u110 21A6  
                      u111 21A2                        u120 21CA                        u121 21C6  
                      u130 2200                        u131 21FC                        u140 2224  
                      u141 2220                        u310 23A2                        u150 2248  
                      u230 2588                        u311 239E                        u151 2244  
                      u231 2584                        u320 23BC                        u160 226C  
                      u240 25D2                        u321 23B8                        u161 2268  
                      u241 25CE                        u330 23E2                        u250 250A  
                      u331 23DE                        u251 2506                        u340 2400  
                      u260 2554                        u341 23FC                        u261 2550  
                      u350 241C                        u270 2606                        u351 2418  
                      u271 2602                        u407 22D4                        u360 2442  
                      u280 2616                        u361 243E                        u281 2612  
                      u417 22F2                        u370 232A                        u507 25BA  
                      u371 2326                        u427 230A                        u380 2384  
                      u517 25EE                        u381 2380                        u437 234E  
                      u607 2132                        u527 2024                        u447 2362  
                      u617 2144                        u537 2048                        u457 24F2  
                      u707 2276                        u627 2168                        u547 206C  
                      u467 2514                        u637 218C                        u557 2090  
                      u477 253C                        u397 22B6                        u647 21B0  
                      u567 20A2                        u487 2570                        u657 21D4  
                      u577 20C6                        u497 2592                        u667 21E6  
                      u587 20EA                        u677 220A                        u597 210E  
                      u687 222E                        u697 2252                        _key 0018  
                      wreg 3FE8                       l1100 23AA                       l1110 23D0  
                     l1102 23AE                       l1120 2406                       l1112 23E2  
                     l1104 23BC                       l1200 2312                       l1122 241C  
                     l1114 23EA                       l1130 2432                       l1106 23C4  
                     l1210 2356                       l1202 2318                       l1028 262C  
                     l1132 2442                       l1124 2424                       l1116 23F2  
                     l1108 23C8                       l1140 2458                       l1212 235C  
                     l1204 232A                       l1134 244A                       l1126 2426  
                     l1118 2400                       l1142 245E                       l1214 236A  
                     l1206 2342                       l1128 242C                       l1240 24B2  
                     l1152 246E                       l1216 2370                       l1208 2348  
                     l1146 2464                       l1138 2454                       l1218 2384  
                     l1164 2498                       l1180 22A8                       l1094 2390  
                     l1158 247C                       l1166 249C                       l1190 22E0  
                     l1182 22AC                       l1096 2394                       l1168 24D8  
                     l1192 22E4                       l1184 22C2                       l1176 2282  
                     l1098 23A2                       l1194 22E8                       l1186 22C6  
                     l1178 22A4                       l1196 22FE                       l1188 22CA  
                     l1198 2304                       _LATB 3FBB                       _LATD 3FBD  
                     _main 2282                       prodl 3FF3                       start FFFC  
             ___param_bank 0000                      ?_main 0001            __end_of___awdiv 2454  
          ___awdiv@divisor 0003            ___awdiv@counter 0005                      _PORTB 3FCB  
                    _PORTD 3FCD                      _TRISB 3FC3                      _TRISD 3FC5  
          __end_of_display 2634                      status 3FD8            __initialization 261C  
             __end_of_main 2390                     ??_main 0012              __activetblptr 0003  
         ___awdiv@dividend 0001                     _ANSELB 3A50                     _ANSELD 3A70  
            display@Result 0001                     _Result 0014                  ??___awdiv 0005  
         __end_of_evaluate 24DC           ___awdiv@quotient 0007                     isa$std 0001  
                ??_display 0001               __mediumconst 0000             evaluate@result 0011  
               __accesstop 0060    __end_of__initialization 2624              ___rparam_used 0001  
           __pcstackCOMRAM 0001                 __pnvCOMRAM 0018                  ?_evaluate 0009  
        __end_of_getInputX 25D8          __end_of_getInputY 255A                    __Hparam 0000  
                  __Lparam 0000                    ___awdiv 2390               __psmallconst 2000  
                  __pcinit 261C                    __ramtop 2000                    __ptext0 2282  
                  __ptext1 24DC                    __ptext2 255A                    __ptext3 25D8  
                  __ptext4 2002                    __ptext5 2454                    __ptext6 2390  
                  __ptext7 262A                    _display 262A                    _input_X 0017  
                  _input_Y 0016          _getInputOperation 25D8         ?_getInputOperation 0001  
     end_of_initialization 2624                 ??_evaluate 000F        ??_getInputOperation 0002  
            ??_getKeypress 0001  __end_of_getInputOperation 261C            evaluate@input_X 0009  
          evaluate@input_Y 000B        start_initialization 261C        __end_of_getKeypress 2282  
                _Operation 0015                __pbssCOMRAM 0014                   ?___awdiv 0001  
                _getInputX 255A                  _getInputY 24DC                   ?_display 0001  
              __smallconst 2000                _getKeypress 2002                 ?_getInputX 0001  
               ?_getInputY 0001                   __Hrparam 0000                   __Lrparam 0000  
                 _evaluate 2454          evaluate@Operation 000D                   isa$xinst 0000  
              ??_getInputX 0002                ??_getInputY 0002               ?_getKeypress 0001  
