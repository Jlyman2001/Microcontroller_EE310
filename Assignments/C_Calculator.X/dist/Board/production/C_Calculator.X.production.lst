

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Thu Apr 11 17:34:19 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F47K42
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    21   000000                     
    22                           ; Generated 12/10/2023 GMT
    23                           ; 
    24                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F47K42 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56   000000                     
    57                           	psect	nvCOMRAM
    58   000018                     __pnvCOMRAM:
    59                           	callstack 0
    60   000018                     _key:
    61                           	callstack 0
    62   000018                     	ds	1
    63   000000                     _ANSELB	set	14928
    64   000000                     _LATB	set	16315
    65   000000                     _TRISB	set	16323
    66   000000                     _PORTB	set	16331
    67   000000                     _PORTD	set	16333
    68   000000                     _TRISD	set	16325
    69   000000                     _LATD	set	16317
    70   000000                     _ANSELD	set	14960
    71                           
    72                           ; #config settings
    73                           
    74                           	psect	cinit
    75   0024D0                     __pcinit:
    76                           	callstack 0
    77   0024D0                     start_initialization:
    78                           	callstack 0
    79   0024D0                     __initialization:
    80                           	callstack 0
    81                           
    82                           ; Clear objects allocated to COMRAM (4 bytes)
    83   0024D0  6A17               	clrf	(__pbssCOMRAM+3)& (0+255),c
    84   0024D2  6A16               	clrf	(__pbssCOMRAM+2)& (0+255),c
    85   0024D4  6A15               	clrf	(__pbssCOMRAM+1)& (0+255),c
    86   0024D6  6A14               	clrf	__pbssCOMRAM& (0+255),c
    87   0024D8                     end_of_initialization:
    88                           	callstack 0
    89   0024D8                     __end_of__initialization:
    90                           	callstack 0
    91   0024D8  0100               	movlb	0
    92   0024DA  EFA6  F010         	goto	_main	;jump to C main() function
    93                           
    94                           	psect	bssCOMRAM
    95   000014                     __pbssCOMRAM:
    96                           	callstack 0
    97   000014                     _Result:
    98                           	callstack 0
    99   000014                     	ds	1
   100   000015                     _Operation:
   101                           	callstack 0
   102   000015                     	ds	1
   103   000016                     _input_Y:
   104                           	callstack 0
   105   000016                     	ds	1
   106   000017                     _input_X:
   107                           	callstack 0
   108   000017                     	ds	1
   109                           
   110                           	psect	cstackCOMRAM
   111   000001                     __pcstackCOMRAM:
   112                           	callstack 0
   113   000001                     ??_getKeypress:
   114   000001                     ?___awdiv:
   115                           	callstack 0
   116   000001                     display@Result:
   117                           	callstack 0
   118   000001                     ___awdiv@dividend:
   119                           	callstack 0
   120                           
   121                           ; 2 bytes @ 0x0
   122   000001                     	ds	1
   123   000002                     ??_getInputX:
   124   000002                     ??_getInputY:
   125   000002                     ??_getInputOperation:
   126                           
   127                           ; 1 bytes @ 0x1
   128   000002                     	ds	1
   129   000003                     ___awdiv@divisor:
   130                           	callstack 0
   131                           
   132                           ; 2 bytes @ 0x2
   133   000003                     	ds	2
   134   000005                     ___awdiv@counter:
   135                           	callstack 0
   136                           
   137                           ; 1 bytes @ 0x4
   138   000005                     	ds	1
   139   000006                     ___awdiv@sign:
   140                           	callstack 0
   141                           
   142                           ; 1 bytes @ 0x5
   143   000006                     	ds	1
   144   000007                     ___awdiv@quotient:
   145                           	callstack 0
   146                           
   147                           ; 2 bytes @ 0x6
   148   000007                     	ds	2
   149   000009                     evaluate@input_X:
   150                           	callstack 0
   151                           
   152                           ; 2 bytes @ 0x8
   153   000009                     	ds	2
   154   00000B                     evaluate@input_Y:
   155                           	callstack 0
   156                           
   157                           ; 2 bytes @ 0xA
   158   00000B                     	ds	2
   159   00000D                     evaluate@Operation:
   160                           	callstack 0
   161                           
   162                           ; 2 bytes @ 0xC
   163   00000D                     	ds	2
   164   00000F                     ??_evaluate:
   165                           
   166                           ; 1 bytes @ 0xE
   167   00000F                     	ds	2
   168   000011                     evaluate@result:
   169                           	callstack 0
   170                           
   171                           ; 1 bytes @ 0x10
   172   000011                     	ds	1
   173   000012                     ??_main:
   174                           
   175                           ; 1 bytes @ 0x11
   176   000012                     	ds	2
   177                           
   178 ;;
   179 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   180 ;;
   181 ;; *************** function _main *****************
   182 ;; Defined at:
   183 ;;		line 226 in file "newmain.c"
   184 ;; Parameters:    Size  Location     Type
   185 ;;		None
   186 ;; Auto vars:     Size  Location     Type
   187 ;;		None
   188 ;; Return value:  Size  Location     Type
   189 ;;                  1    wreg      void 
   190 ;; Registers used:
   191 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   192 ;; Tracked objects:
   193 ;;		On entry : 0/0
   194 ;;		On exit  : 0/0
   195 ;;		Unchanged: 0/0
   196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
   197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   199 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   200 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   201 ;;Total ram usage:        2 bytes
   202 ;; Hardware stack levels required when called: 2
   203 ;; This function calls:
   204 ;;		_display
   205 ;;		_evaluate
   206 ;;		_getInputOperation
   207 ;;		_getInputX
   208 ;;		_getInputY
   209 ;;		_getKeypress
   210 ;; This function is called by:
   211 ;;		Startup code after reset
   212 ;; This function uses a non-reentrant model
   213 ;;
   214                           
   215                           	psect	text0
   216   00214C                     __ptext0:
   217                           	callstack 0
   218   00214C                     _main:
   219                           	callstack 29
   220   00214C                     
   221                           ;newmain.c: 229:     TRISB = 0xF0;
   222   00214C  0EF0               	movlw	240
   223   00214E  6EC3               	movwf	195,c	;volatile
   224                           
   225                           ;newmain.c: 230:     LATB = 0;
   226   002150  0E00               	movlw	0
   227   002152  6EBB               	movwf	187,c	;volatile
   228                           
   229                           ;newmain.c: 231:     PORTB = 0;
   230   002154  0E00               	movlw	0
   231   002156  6ECB               	movwf	203,c	;volatile
   232                           
   233                           ;newmain.c: 232:     ANSELB = 0;
   234   002158  0E00               	movlw	0
   235   00215A  013A               	movlb	58	; () banked
   236   00215C  6F50               	movwf	80,b	;volatile
   237                           
   238                           ;newmain.c: 234:     TRISD = 0;
   239   00215E  0E00               	movlw	0
   240   002160  6EC5               	movwf	197,c	;volatile
   241                           
   242                           ;newmain.c: 235:     LATD = 0;
   243   002162  0E00               	movlw	0
   244   002164  6EBD               	movwf	189,c	;volatile
   245                           
   246                           ;newmain.c: 236:     PORTD = 0;
   247   002166  0E00               	movlw	0
   248   002168  6ECD               	movwf	205,c	;volatile
   249                           
   250                           ;newmain.c: 237:     ANSELD = 0;
   251   00216A  0E00               	movlw	0
   252   00216C  6F70               	movwf	112,b	;volatile
   253   00216E                     l1173:
   254                           
   255                           ;newmain.c: 241:     {;newmain.c: 242:         getInputX();
   256   00216E  EC07  F012         	call	_getInputX	;wreg free
   257   002172                     
   258                           ;newmain.c: 243:         PORTD = 0x01;
   259   002172  0E01               	movlw	1
   260   002174  6ECD               	movwf	205,c	;volatile
   261   002176                     
   262                           ;newmain.c: 244:         _delay((unsigned long)((500)*(4000000/4000.0)));
   263   002176  0E03               	movlw	3
   264   002178  6E13               	movwf	(??_main+1)^0,c
   265   00217A  0E8A               	movlw	138
   266   00217C  6E12               	movwf	??_main^0,c
   267   00217E  0E56               	movlw	86
   268   002180                     u237:
   269   002180  2EE8               	decfsz	wreg,f,c
   270   002182  D7FE               	bra	u237
   271   002184  2E12               	decfsz	??_main^0,f,c
   272   002186  D7FC               	bra	u237
   273   002188  2E13               	decfsz	(??_main+1)^0,f,c
   274   00218A  D7FA               	bra	u237
   275   00218C                     
   276                           ;newmain.c: 245:         getInputOperation();
   277   00218C  EC46  F012         	call	_getInputOperation	;wreg free
   278   002190                     
   279                           ;newmain.c: 246:         PORTD = 0x03;
   280   002190  0E03               	movlw	3
   281   002192  6ECD               	movwf	205,c	;volatile
   282   002194                     
   283                           ;newmain.c: 247:         _delay((unsigned long)((500)*(4000000/4000.0)));
   284   002194  0E03               	movlw	3
   285   002196  6E13               	movwf	(??_main+1)^0,c
   286   002198  0E8A               	movlw	138
   287   00219A  6E12               	movwf	??_main^0,c
   288   00219C  0E56               	movlw	86
   289   00219E                     u247:
   290   00219E  2EE8               	decfsz	wreg,f,c
   291   0021A0  D7FE               	bra	u247
   292   0021A2  2E12               	decfsz	??_main^0,f,c
   293   0021A4  D7FC               	bra	u247
   294   0021A6  2E13               	decfsz	(??_main+1)^0,f,c
   295   0021A8  D7FA               	bra	u247
   296   0021AA                     
   297                           ;newmain.c: 248:         getInputY();
   298   0021AA  ECC8  F011         	call	_getInputY	;wreg free
   299   0021AE                     
   300                           ;newmain.c: 249:         PORTD = 0x02;
   301   0021AE  0E02               	movlw	2
   302   0021B0  6ECD               	movwf	205,c	;volatile
   303   0021B2                     
   304                           ;newmain.c: 250:         _delay((unsigned long)((500)*(4000000/4000.0)));
   305   0021B2  0E03               	movlw	3
   306   0021B4  6E13               	movwf	(??_main+1)^0,c
   307   0021B6  0E8A               	movlw	138
   308   0021B8  6E12               	movwf	??_main^0,c
   309   0021BA  0E56               	movlw	86
   310   0021BC                     u257:
   311   0021BC  2EE8               	decfsz	wreg,f,c
   312   0021BE  D7FE               	bra	u257
   313   0021C0  2E12               	decfsz	??_main^0,f,c
   314   0021C2  D7FC               	bra	u257
   315   0021C4  2E13               	decfsz	(??_main+1)^0,f,c
   316   0021C6  D7FA               	bra	u257
   317   0021C8                     
   318                           ;newmain.c: 261:         Result = evaluate(input_X,input_Y,Operation);
   319   0021C8  C017  F009         	movff	_input_X,evaluate@input_X
   320   0021CC  6A0A               	clrf	(evaluate@input_X+1)^0,c
   321   0021CE  C016  F00B         	movff	_input_Y,evaluate@input_Y
   322   0021D2  6A0C               	clrf	(evaluate@input_Y+1)^0,c
   323   0021D4  C015  F00D         	movff	_Operation,evaluate@Operation
   324   0021D8  6A0E               	clrf	(evaluate@Operation+1)^0,c
   325   0021DA  EC79  F011         	call	_evaluate	;wreg free
   326   0021DE  6E14               	movwf	_Result^0,c
   327   0021E0                     
   328                           ;newmain.c: 262:         display(Result);
   329   0021E0  5014               	movf	_Result^0,w,c
   330   0021E2  EC6F  F012         	call	_display
   331   0021E6                     
   332                           ;newmain.c: 263:         _delay((unsigned long)((10)*(4000000/4000.0)));
   333   0021E6  0E0D               	movlw	13
   334   0021E8  6E12               	movwf	??_main^0,c
   335   0021EA  0EFC               	movlw	252
   336   0021EC                     u267:
   337   0021EC  2EE8               	decfsz	wreg,f,c
   338   0021EE  D7FE               	bra	u267
   339   0021F0  2E12               	decfsz	??_main^0,f,c
   340   0021F2  D7FC               	bra	u267
   341   0021F4                     
   342                           ;newmain.c: 265:         key = 0xFF;
   343   0021F4  6818               	setf	_key^0,c
   344                           
   345                           ;newmain.c: 266:         while(getKeypress() != 0x0E)
   346   0021F6  EF07  F011         	goto	l1203
   347   0021FA                     l1199:
   348                           
   349                           ;newmain.c: 267:         {;newmain.c: 268:             _delay((unsigned long)((10)*(4000
      +                          000/4000.0)));
   350   0021FA  0E0D               	movlw	13
   351   0021FC  6E12               	movwf	??_main^0,c
   352   0021FE  0EFC               	movlw	252
   353   002200                     u277:
   354   002200  2EE8               	decfsz	wreg,f,c
   355   002202  D7FE               	bra	u277
   356   002204  2E12               	decfsz	??_main^0,f,c
   357   002206  D7FC               	bra	u277
   358   002208                     
   359                           ;newmain.c: 269:             key = getKeypress();
   360   002208  EC01  F010         	call	_getKeypress	;wreg free
   361   00220C  6E18               	movwf	_key^0,c
   362   00220E                     l1203:
   363                           
   364                           ;newmain.c: 266:         while(getKeypress() != 0x0E)
   365   00220E  EC01  F010         	call	_getKeypress	;wreg free
   366   002212  0A0E               	xorlw	14
   367   002214  A4D8               	btfss	status,2,c
   368   002216  EF0F  F011         	goto	u221
   369   00221A  EF11  F011         	goto	u220
   370   00221E                     u221:
   371   00221E  EFFD  F010         	goto	l1199
   372   002222                     u220:
   373   002222                     
   374                           ;newmain.c: 271:         PORTD = 0x80;
   375   002222  0E80               	movlw	128
   376   002224  6ECD               	movwf	205,c	;volatile
   377                           
   378                           ;newmain.c: 273:         if (0)
   379   002226  EFB7  F010         	goto	l1173
   380   00222A  EFFE  F0FF         	goto	start
   381   00222E                     __end_of_main:
   382                           	callstack 0
   383                           
   384 ;; *************** function _getInputY *****************
   385 ;; Defined at:
   386 ;;		line 165 in file "newmain.c"
   387 ;; Parameters:    Size  Location     Type
   388 ;;		None
   389 ;; Auto vars:     Size  Location     Type
   390 ;;		None
   391 ;; Return value:  Size  Location     Type
   392 ;;                  1    wreg      void 
   393 ;; Registers used:
   394 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   395 ;; Tracked objects:
   396 ;;		On entry : 0/0
   397 ;;		On exit  : 0/0
   398 ;;		Unchanged: 0/0
   399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
   400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   402 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   403 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   404 ;;Total ram usage:        2 bytes
   405 ;; Hardware stack levels used: 1
   406 ;; Hardware stack levels required when called: 1
   407 ;; This function calls:
   408 ;;		_getKeypress
   409 ;; This function is called by:
   410 ;;		_main
   411 ;; This function uses a non-reentrant model
   412 ;;
   413                           
   414                           	psect	text1
   415   002390                     __ptext1:
   416                           	callstack 0
   417   002390                     _getInputY:
   418                           	callstack 29
   419   002390                     
   420                           ;newmain.c: 167:     input_Y = 0;
   421   002390  0E00               	movlw	0
   422   002392  6E16               	movwf	_input_Y^0,c
   423   002394                     
   424                           ;newmain.c: 168:     key = 0xFF;
   425   002394  6818               	setf	_key^0,c
   426                           
   427                           ;newmain.c: 169:     while (key >= 0x0A){
   428   002396  EFD7  F011         	goto	l959
   429   00239A                     l955:
   430                           
   431                           ;newmain.c: 170:         key = getKeypress();
   432   00239A  EC01  F010         	call	_getKeypress	;wreg free
   433   00239E  6E18               	movwf	_key^0,c
   434   0023A0                     
   435                           ;newmain.c: 171:         _delay((unsigned long)((10)*(4000000/4000.0)));
   436   0023A0  0E0D               	movlw	13
   437   0023A2  6E02               	movwf	??_getInputY^0,c
   438   0023A4  0EFC               	movlw	252
   439   0023A6                     u287:
   440   0023A6  2EE8               	decfsz	wreg,f,c
   441   0023A8  D7FE               	bra	u287
   442   0023AA  2E02               	decfsz	??_getInputY^0,f,c
   443   0023AC  D7FC               	bra	u287
   444   0023AE                     l959:
   445                           
   446                           ;newmain.c: 169:     while (key >= 0x0A){
   447   0023AE  0E0A               	movlw	10
   448   0023B0  6018               	cpfslt	_key^0,c
   449   0023B2  EFDD  F011         	goto	u91
   450   0023B6  EFDF  F011         	goto	u90
   451   0023BA                     u91:
   452   0023BA  EFCD  F011         	goto	l955
   453   0023BE                     u90:
   454   0023BE                     
   455                           ;newmain.c: 173:     _delay((unsigned long)((300)*(4000000/4000.0)));
   456   0023BE  0E02               	movlw	2
   457   0023C0  6E03               	movwf	(??_getInputY+1)^0,c
   458   0023C2  0E86               	movlw	134
   459   0023C4  6E02               	movwf	??_getInputY^0,c
   460   0023C6  0E99               	movlw	153
   461   0023C8                     u297:
   462   0023C8  2EE8               	decfsz	wreg,f,c
   463   0023CA  D7FE               	bra	u297
   464   0023CC  2E02               	decfsz	??_getInputY^0,f,c
   465   0023CE  D7FC               	bra	u297
   466   0023D0  2E03               	decfsz	(??_getInputY+1)^0,f,c
   467   0023D2  D7FA               	bra	u297
   468   0023D4  0000               	nop	
   469   0023D6                     
   470                           ;newmain.c: 174:     input_Y += 10*key;
   471   0023D6  5018               	movf	_key^0,w,c
   472   0023D8  0D0A               	mullw	10
   473   0023DA  50F3               	movf	243,w,c
   474   0023DC  2616               	addwf	_input_Y^0,f,c
   475   0023DE                     
   476                           ;newmain.c: 175:     key = 0xFF;
   477   0023DE  6818               	setf	_key^0,c
   478                           
   479                           ;newmain.c: 176:     while (key >= 0x0A){
   480   0023E0  EFFC  F011         	goto	l971
   481   0023E4                     l967:
   482                           
   483                           ;newmain.c: 177:         key = getKeypress();
   484   0023E4  EC01  F010         	call	_getKeypress	;wreg free
   485   0023E8  6E18               	movwf	_key^0,c
   486   0023EA                     
   487                           ;newmain.c: 178:         _delay((unsigned long)((10)*(4000000/4000.0)));
   488   0023EA  0E0D               	movlw	13
   489   0023EC  6E02               	movwf	??_getInputY^0,c
   490   0023EE  0EFC               	movlw	252
   491   0023F0                     u307:
   492   0023F0  2EE8               	decfsz	wreg,f,c
   493   0023F2  D7FE               	bra	u307
   494   0023F4  2E02               	decfsz	??_getInputY^0,f,c
   495   0023F6  D7FC               	bra	u307
   496   0023F8                     l971:
   497                           
   498                           ;newmain.c: 176:     while (key >= 0x0A){
   499   0023F8  0E0A               	movlw	10
   500   0023FA  6018               	cpfslt	_key^0,c
   501   0023FC  EF02  F012         	goto	u101
   502   002400  EF04  F012         	goto	u100
   503   002404                     u101:
   504   002404  EFF2  F011         	goto	l967
   505   002408                     u100:
   506   002408                     
   507                           ;newmain.c: 180:     input_Y += key;
   508   002408  5018               	movf	_key^0,w,c
   509   00240A  2616               	addwf	_input_Y^0,f,c
   510   00240C  0012               	return		;funcret
   511   00240E                     __end_of_getInputY:
   512                           	callstack 0
   513                           
   514 ;; *************** function _getInputX *****************
   515 ;; Defined at:
   516 ;;		line 146 in file "newmain.c"
   517 ;; Parameters:    Size  Location     Type
   518 ;;		None
   519 ;; Auto vars:     Size  Location     Type
   520 ;;		None
   521 ;; Return value:  Size  Location     Type
   522 ;;                  1    wreg      void 
   523 ;; Registers used:
   524 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   525 ;; Tracked objects:
   526 ;;		On entry : 0/0
   527 ;;		On exit  : 0/0
   528 ;;		Unchanged: 0/0
   529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
   530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   532 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   533 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   534 ;;Total ram usage:        2 bytes
   535 ;; Hardware stack levels used: 1
   536 ;; Hardware stack levels required when called: 1
   537 ;; This function calls:
   538 ;;		_getKeypress
   539 ;; This function is called by:
   540 ;;		_main
   541 ;; This function uses a non-reentrant model
   542 ;;
   543                           
   544                           	psect	text2
   545   00240E                     __ptext2:
   546                           	callstack 0
   547   00240E                     _getInputX:
   548                           	callstack 29
   549   00240E                     
   550                           ;newmain.c: 148:     input_X = 0;
   551   00240E  0E00               	movlw	0
   552   002410  6E17               	movwf	_input_X^0,c
   553   002412                     
   554                           ;newmain.c: 149:     key = 0xFF;
   555   002412  6818               	setf	_key^0,c
   556                           
   557                           ;newmain.c: 150:     while (key >= 0x0A){
   558   002414  EF16  F012         	goto	l935
   559   002418                     l931:
   560                           
   561                           ;newmain.c: 151:         key = getKeypress();
   562   002418  EC01  F010         	call	_getKeypress	;wreg free
   563   00241C  6E18               	movwf	_key^0,c
   564   00241E                     
   565                           ;newmain.c: 152:         _delay((unsigned long)((10)*(4000000/4000.0)));
   566   00241E  0E0D               	movlw	13
   567   002420  6E02               	movwf	??_getInputX^0,c
   568   002422  0EFC               	movlw	252
   569   002424                     u317:
   570   002424  2EE8               	decfsz	wreg,f,c
   571   002426  D7FE               	bra	u317
   572   002428  2E02               	decfsz	??_getInputX^0,f,c
   573   00242A  D7FC               	bra	u317
   574   00242C                     l935:
   575                           
   576                           ;newmain.c: 150:     while (key >= 0x0A){
   577   00242C  0E0A               	movlw	10
   578   00242E  6018               	cpfslt	_key^0,c
   579   002430  EF1C  F012         	goto	u71
   580   002434  EF1E  F012         	goto	u70
   581   002438                     u71:
   582   002438  EF0C  F012         	goto	l931
   583   00243C                     u70:
   584   00243C                     
   585                           ;newmain.c: 154:     _delay((unsigned long)((300)*(4000000/4000.0)));
   586   00243C  0E02               	movlw	2
   587   00243E  6E03               	movwf	(??_getInputX+1)^0,c
   588   002440  0E86               	movlw	134
   589   002442  6E02               	movwf	??_getInputX^0,c
   590   002444  0E99               	movlw	153
   591   002446                     u327:
   592   002446  2EE8               	decfsz	wreg,f,c
   593   002448  D7FE               	bra	u327
   594   00244A  2E02               	decfsz	??_getInputX^0,f,c
   595   00244C  D7FC               	bra	u327
   596   00244E  2E03               	decfsz	(??_getInputX+1)^0,f,c
   597   002450  D7FA               	bra	u327
   598   002452  0000               	nop	
   599   002454                     
   600                           ;newmain.c: 155:     input_X += 10*key;
   601   002454  5018               	movf	_key^0,w,c
   602   002456  0D0A               	mullw	10
   603   002458  50F3               	movf	243,w,c
   604   00245A  2617               	addwf	_input_X^0,f,c
   605   00245C                     
   606                           ;newmain.c: 156:     key = 0xFF;
   607   00245C  6818               	setf	_key^0,c
   608                           
   609                           ;newmain.c: 157:     while (key >= 0x0A){
   610   00245E  EF3B  F012         	goto	l947
   611   002462                     l943:
   612                           
   613                           ;newmain.c: 158:         key = getKeypress();
   614   002462  EC01  F010         	call	_getKeypress	;wreg free
   615   002466  6E18               	movwf	_key^0,c
   616   002468                     
   617                           ;newmain.c: 159:         _delay((unsigned long)((10)*(4000000/4000.0)));
   618   002468  0E0D               	movlw	13
   619   00246A  6E02               	movwf	??_getInputX^0,c
   620   00246C  0EFC               	movlw	252
   621   00246E                     u337:
   622   00246E  2EE8               	decfsz	wreg,f,c
   623   002470  D7FE               	bra	u337
   624   002472  2E02               	decfsz	??_getInputX^0,f,c
   625   002474  D7FC               	bra	u337
   626   002476                     l947:
   627                           
   628                           ;newmain.c: 157:     while (key >= 0x0A){
   629   002476  0E0A               	movlw	10
   630   002478  6018               	cpfslt	_key^0,c
   631   00247A  EF41  F012         	goto	u81
   632   00247E  EF43  F012         	goto	u80
   633   002482                     u81:
   634   002482  EF31  F012         	goto	l943
   635   002486                     u80:
   636   002486                     
   637                           ;newmain.c: 161:     input_X += key;
   638   002486  5018               	movf	_key^0,w,c
   639   002488  2617               	addwf	_input_X^0,f,c
   640   00248A  0012               	return		;funcret
   641   00248C                     __end_of_getInputX:
   642                           	callstack 0
   643                           
   644 ;; *************** function _getInputOperation *****************
   645 ;; Defined at:
   646 ;;		line 183 in file "newmain.c"
   647 ;; Parameters:    Size  Location     Type
   648 ;;		None
   649 ;; Auto vars:     Size  Location     Type
   650 ;;		None
   651 ;; Return value:  Size  Location     Type
   652 ;;                  1    wreg      void 
   653 ;; Registers used:
   654 ;;		wreg, status,2, status,0, cstack
   655 ;; Tracked objects:
   656 ;;		On entry : 0/0
   657 ;;		On exit  : 0/0
   658 ;;		Unchanged: 0/0
   659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
   660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   662 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   663 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   664 ;;Total ram usage:        1 bytes
   665 ;; Hardware stack levels used: 1
   666 ;; Hardware stack levels required when called: 1
   667 ;; This function calls:
   668 ;;		_getKeypress
   669 ;; This function is called by:
   670 ;;		_main
   671 ;; This function uses a non-reentrant model
   672 ;;
   673                           
   674                           	psect	text3
   675   00248C                     __ptext3:
   676                           	callstack 0
   677   00248C                     _getInputOperation:
   678                           	callstack 29
   679   00248C                     
   680                           ;newmain.c: 185:     Operation = 0;
   681   00248C  0E00               	movlw	0
   682   00248E  6E15               	movwf	_Operation^0,c
   683   002490                     
   684                           ;newmain.c: 186:     key = 0xFF;
   685   002490  6818               	setf	_key^0,c
   686                           
   687                           ;newmain.c: 187:     while (key > 0x0F || key < 0x0A)
   688   002492  EF55  F012         	goto	l983
   689   002496                     l979:
   690                           
   691                           ;newmain.c: 188:     {;newmain.c: 189:         key = getKeypress();
   692   002496  EC01  F010         	call	_getKeypress	;wreg free
   693   00249A  6E18               	movwf	_key^0,c
   694   00249C                     
   695                           ;newmain.c: 190:         _delay((unsigned long)((10)*(4000000/4000.0)));
   696   00249C  0E0D               	movlw	13
   697   00249E  6E02               	movwf	??_getInputOperation^0,c
   698   0024A0  0EFC               	movlw	252
   699   0024A2                     u347:
   700   0024A2  2EE8               	decfsz	wreg,f,c
   701   0024A4  D7FE               	bra	u347
   702   0024A6  2E02               	decfsz	??_getInputOperation^0,f,c
   703   0024A8  D7FC               	bra	u347
   704   0024AA                     l983:
   705                           
   706                           ;newmain.c: 187:     while (key > 0x0F || key < 0x0A)
   707   0024AA  0E10               	movlw	16
   708   0024AC  6018               	cpfslt	_key^0,c
   709   0024AE  EF5B  F012         	goto	u111
   710   0024B2  EF5D  F012         	goto	u110
   711   0024B6                     u111:
   712   0024B6  EF4B  F012         	goto	l979
   713   0024BA                     u110:
   714   0024BA  0E09               	movlw	9
   715   0024BC  6418               	cpfsgt	_key^0,c
   716   0024BE  EF63  F012         	goto	u121
   717   0024C2  EF65  F012         	goto	u120
   718   0024C6                     u121:
   719   0024C6  EF4B  F012         	goto	l979
   720   0024CA                     u120:
   721   0024CA                     
   722                           ;newmain.c: 192:         Operation = key;
   723   0024CA  C018  F015         	movff	_key,_Operation
   724   0024CE  0012               	return		;funcret
   725   0024D0                     __end_of_getInputOperation:
   726                           	callstack 0
   727                           
   728 ;; *************** function _getKeypress *****************
   729 ;; Defined at:
   730 ;;		line 34 in file "newmain.c"
   731 ;; Parameters:    Size  Location     Type
   732 ;;		None
   733 ;; Auto vars:     Size  Location     Type
   734 ;;		None
   735 ;; Return value:  Size  Location     Type
   736 ;;                  1    wreg      unsigned char 
   737 ;; Registers used:
   738 ;;		wreg, status,2, status,0
   739 ;; Tracked objects:
   740 ;;		On entry : 0/0
   741 ;;		On exit  : 0/0
   742 ;;		Unchanged: 0/0
   743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
   744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   746 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   747 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
   748 ;;Total ram usage:        1 bytes
   749 ;; Hardware stack levels used: 1
   750 ;; This function calls:
   751 ;;		Nothing
   752 ;; This function is called by:
   753 ;;		_getInputX
   754 ;;		_getInputY
   755 ;;		_getInputOperation
   756 ;;		_main
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760                           	psect	text4
   761   002002                     __ptext4:
   762                           	callstack 0
   763   002002                     _getKeypress:
   764                           	callstack 30
   765   002002                     
   766                           ;newmain.c: 38:     key = 0xFF;
   767   002002  6818               	setf	_key^0,c
   768   002004                     
   769                           ;newmain.c: 39:     PORTB = 0x01;
   770   002004  0E01               	movlw	1
   771   002006  6ECB               	movwf	203,c	;volatile
   772                           
   773                           ;newmain.c: 41:     switch (PORTB)
   774   002008  EF12  F010         	goto	l803
   775   00200C                     l785:
   776                           
   777                           ;newmain.c: 44:             {;newmain.c: 45:                 return 0x0D;
   778   00200C  0E0D               	movlw	13
   779   00200E  EFA5  F010         	goto	l33
   780   002012                     l34:
   781                           
   782                           ;newmain.c: 50:                 return 0x0C;
   783   002012  0E0C               	movlw	12
   784   002014  EFA5  F010         	goto	l33
   785   002018                     l35:
   786                           
   787                           ;newmain.c: 55:                 return 0x0B;
   788   002018  0E0B               	movlw	11
   789   00201A  EFA5  F010         	goto	l33
   790   00201E                     l36:
   791                           
   792                           ;newmain.c: 60:                 return 0x0A;
   793   00201E  0E0A               	movlw	10
   794   002020  EFA5  F010         	goto	l33
   795   002024                     l803:
   796   002024  50CB               	movf	203,w,c	;volatile
   797                           
   798                           ; Switch size 1, requested type "simple"
   799                           ; Number of cases is 4, Range of values is 17 to 129
   800                           ; switch strategies available:
   801                           ; Name         Instructions Cycles
   802                           ; simple_byte           13     7 (average)
   803                           ;	Chosen strategy is simple_byte
   804   002026  0A11               	xorlw	17	; case 17
   805   002028  B4D8               	btfsc	status,2,c
   806   00202A  EF06  F010         	goto	l785
   807   00202E  0A30               	xorlw	48	; case 33
   808   002030  B4D8               	btfsc	status,2,c
   809   002032  EF09  F010         	goto	l34
   810   002036  0A60               	xorlw	96	; case 65
   811   002038  B4D8               	btfsc	status,2,c
   812   00203A  EF0C  F010         	goto	l35
   813   00203E  0AC0               	xorlw	192	; case 129
   814   002040  B4D8               	btfsc	status,2,c
   815   002042  EF0F  F010         	goto	l36
   816   002046  EF25  F010         	goto	l805
   817   00204A                     l805:
   818                           
   819                           ;newmain.c: 66:     PORTB = 0x02;
   820   00204A  0E02               	movlw	2
   821   00204C  6ECB               	movwf	203,c	;volatile
   822   00204E                     
   823                           ;newmain.c: 67:     _delay((unsigned long)((10)*(4000000/4000.0)));
   824   00204E  0E0D               	movlw	13
   825   002050  6E01               	movwf	??_getKeypress^0,c
   826   002052  0EFC               	movlw	252
   827   002054                     u357:
   828   002054  2EE8               	decfsz	wreg,f,c
   829   002056  D7FE               	bra	u357
   830   002058  2E01               	decfsz	??_getKeypress^0,f,c
   831   00205A  D7FC               	bra	u357
   832                           
   833                           ;newmain.c: 68:     switch (PORTB)
   834   00205C  EF3C  F010         	goto	l827
   835   002060                     l809:
   836                           
   837                           ;newmain.c: 71:                 return 0x0F;
   838   002060  0E0F               	movlw	15
   839   002062  EFA5  F010         	goto	l33
   840   002066                     l40:
   841                           
   842                           ;newmain.c: 76:                 return 9;
   843   002066  0E09               	movlw	9
   844   002068  EFA5  F010         	goto	l33
   845   00206C                     l41:
   846                           
   847                           ;newmain.c: 81:                 return 6;
   848   00206C  0E06               	movlw	6
   849   00206E  EFA5  F010         	goto	l33
   850   002072                     l42:
   851                           
   852                           ;newmain.c: 86:                 return 3;
   853   002072  0E03               	movlw	3
   854   002074  EFA5  F010         	goto	l33
   855   002078                     l827:
   856   002078  50CB               	movf	203,w,c	;volatile
   857                           
   858                           ; Switch size 1, requested type "simple"
   859                           ; Number of cases is 4, Range of values is 18 to 130
   860                           ; switch strategies available:
   861                           ; Name         Instructions Cycles
   862                           ; simple_byte           13     7 (average)
   863                           ;	Chosen strategy is simple_byte
   864   00207A  0A12               	xorlw	18	; case 18
   865   00207C  B4D8               	btfsc	status,2,c
   866   00207E  EF30  F010         	goto	l809
   867   002082  0A30               	xorlw	48	; case 34
   868   002084  B4D8               	btfsc	status,2,c
   869   002086  EF33  F010         	goto	l40
   870   00208A  0A60               	xorlw	96	; case 66
   871   00208C  B4D8               	btfsc	status,2,c
   872   00208E  EF36  F010         	goto	l41
   873   002092  0AC0               	xorlw	192	; case 130
   874   002094  B4D8               	btfsc	status,2,c
   875   002096  EF39  F010         	goto	l42
   876   00209A  EF4F  F010         	goto	l829
   877   00209E                     l829:
   878                           
   879                           ;newmain.c: 91:     PORTB = 0x04;
   880   00209E  0E04               	movlw	4
   881   0020A0  6ECB               	movwf	203,c	;volatile
   882   0020A2                     
   883                           ;newmain.c: 92:     _delay((unsigned long)((10)*(4000000/4000.0)));
   884   0020A2  0E0D               	movlw	13
   885   0020A4  6E01               	movwf	??_getKeypress^0,c
   886   0020A6  0EFC               	movlw	252
   887   0020A8                     u367:
   888   0020A8  2EE8               	decfsz	wreg,f,c
   889   0020AA  D7FE               	bra	u367
   890   0020AC  2E01               	decfsz	??_getKeypress^0,f,c
   891   0020AE  D7FC               	bra	u367
   892                           
   893                           ;newmain.c: 93:     switch (PORTB)
   894   0020B0  EF66  F010         	goto	l851
   895   0020B4                     l833:
   896                           
   897                           ;newmain.c: 96:                 return 0;
   898   0020B4  0E00               	movlw	0
   899   0020B6  EFA5  F010         	goto	l33
   900   0020BA                     l46:
   901                           
   902                           ;newmain.c: 101:                 return 8;
   903   0020BA  0E08               	movlw	8
   904   0020BC  EFA5  F010         	goto	l33
   905   0020C0                     l47:
   906                           
   907                           ;newmain.c: 106:                 return 5;
   908   0020C0  0E05               	movlw	5
   909   0020C2  EFA5  F010         	goto	l33
   910   0020C6                     l48:
   911                           
   912                           ;newmain.c: 111:                 return 2;
   913   0020C6  0E02               	movlw	2
   914   0020C8  EFA5  F010         	goto	l33
   915   0020CC                     l851:
   916   0020CC  50CB               	movf	203,w,c	;volatile
   917                           
   918                           ; Switch size 1, requested type "simple"
   919                           ; Number of cases is 4, Range of values is 20 to 132
   920                           ; switch strategies available:
   921                           ; Name         Instructions Cycles
   922                           ; simple_byte           13     7 (average)
   923                           ;	Chosen strategy is simple_byte
   924   0020CE  0A14               	xorlw	20	; case 20
   925   0020D0  B4D8               	btfsc	status,2,c
   926   0020D2  EF5A  F010         	goto	l833
   927   0020D6  0A30               	xorlw	48	; case 36
   928   0020D8  B4D8               	btfsc	status,2,c
   929   0020DA  EF5D  F010         	goto	l46
   930   0020DE  0A60               	xorlw	96	; case 68
   931   0020E0  B4D8               	btfsc	status,2,c
   932   0020E2  EF60  F010         	goto	l47
   933   0020E6  0AC0               	xorlw	192	; case 132
   934   0020E8  B4D8               	btfsc	status,2,c
   935   0020EA  EF63  F010         	goto	l48
   936   0020EE  EF79  F010         	goto	l853
   937   0020F2                     l853:
   938                           
   939                           ;newmain.c: 116:     PORTB = 0x08;
   940   0020F2  0E08               	movlw	8
   941   0020F4  6ECB               	movwf	203,c	;volatile
   942   0020F6                     
   943                           ;newmain.c: 117:     _delay((unsigned long)((10)*(4000000/4000.0)));
   944   0020F6  0E0D               	movlw	13
   945   0020F8  6E01               	movwf	??_getKeypress^0,c
   946   0020FA  0EFC               	movlw	252
   947   0020FC                     u377:
   948   0020FC  2EE8               	decfsz	wreg,f,c
   949   0020FE  D7FE               	bra	u377
   950   002100  2E01               	decfsz	??_getKeypress^0,f,c
   951   002102  D7FC               	bra	u377
   952                           
   953                           ;newmain.c: 118:     switch (PORTB)
   954   002104  EF90  F010         	goto	l875
   955   002108                     l857:
   956                           
   957                           ;newmain.c: 121:                 return 0x0E;
   958   002108  0E0E               	movlw	14
   959   00210A  EFA5  F010         	goto	l33
   960   00210E                     l52:
   961                           
   962                           ;newmain.c: 126:                 return 7;
   963   00210E  0E07               	movlw	7
   964   002110  EFA5  F010         	goto	l33
   965   002114                     l53:
   966                           
   967                           ;newmain.c: 131:                 return 4;
   968   002114  0E04               	movlw	4
   969   002116  EFA5  F010         	goto	l33
   970   00211A                     l54:
   971                           
   972                           ;newmain.c: 136:                 return 1;
   973   00211A  0E01               	movlw	1
   974   00211C  EFA5  F010         	goto	l33
   975   002120                     l875:
   976   002120  50CB               	movf	203,w,c	;volatile
   977                           
   978                           ; Switch size 1, requested type "simple"
   979                           ; Number of cases is 4, Range of values is 24 to 136
   980                           ; switch strategies available:
   981                           ; Name         Instructions Cycles
   982                           ; simple_byte           13     7 (average)
   983                           ;	Chosen strategy is simple_byte
   984   002122  0A18               	xorlw	24	; case 24
   985   002124  B4D8               	btfsc	status,2,c
   986   002126  EF84  F010         	goto	l857
   987   00212A  0A30               	xorlw	48	; case 40
   988   00212C  B4D8               	btfsc	status,2,c
   989   00212E  EF87  F010         	goto	l52
   990   002132  0A60               	xorlw	96	; case 72
   991   002134  B4D8               	btfsc	status,2,c
   992   002136  EF8A  F010         	goto	l53
   993   00213A  0AC0               	xorlw	192	; case 136
   994   00213C  B4D8               	btfsc	status,2,c
   995   00213E  EF8D  F010         	goto	l54
   996   002142  EFA3  F010         	goto	l55
   997   002146                     l55:
   998                           
   999                           ;newmain.c: 141:     key = 0xFF;
  1000   002146  6818               	setf	_key^0,c
  1001   002148                     
  1002                           ;newmain.c: 142:     return key;
  1003   002148  5018               	movf	_key^0,w,c
  1004   00214A                     l33:
  1005   00214A  0012               	return		;funcret
  1006   00214C                     __end_of_getKeypress:
  1007                           	callstack 0
  1008                           
  1009 ;; *************** function _evaluate *****************
  1010 ;; Defined at:
  1011 ;;		line 197 in file "newmain.c"
  1012 ;; Parameters:    Size  Location     Type
  1013 ;;  input_X         2    8[COMRAM] int 
  1014 ;;  input_Y         2   10[COMRAM] int 
  1015 ;;  Operation       2   12[COMRAM] int 
  1016 ;; Auto vars:     Size  Location     Type
  1017 ;;  result          1   16[COMRAM] unsigned char 
  1018 ;; Return value:  Size  Location     Type
  1019 ;;                  1    wreg      unsigned char 
  1020 ;; Registers used:
  1021 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1022 ;; Tracked objects:
  1023 ;;		On entry : 0/0
  1024 ;;		On exit  : 0/0
  1025 ;;		Unchanged: 0/0
  1026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  1027 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1028 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1029 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1030 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1031 ;;Total ram usage:        9 bytes
  1032 ;; Hardware stack levels used: 1
  1033 ;; Hardware stack levels required when called: 1
  1034 ;; This function calls:
  1035 ;;		___awdiv
  1036 ;; This function is called by:
  1037 ;;		_main
  1038 ;; This function uses a non-reentrant model
  1039 ;;
  1040                           
  1041                           	psect	text5
  1042   0022F2                     __ptext5:
  1043                           	callstack 0
  1044   0022F2                     _evaluate:
  1045                           	callstack 29
  1046   0022F2                     
  1047                           ;newmain.c: 197: unsigned char evaluate(input_X,input_Y,Operation);newmain.c: 198: {;new
      +                          main.c: 199:     unsigned char result = 0;
  1048   0022F2  0E00               	movlw	0
  1049   0022F4  6E11               	movwf	evaluate@result^0,c
  1050                           
  1051                           ;newmain.c: 200:     switch (Operation)
  1052   0022F6  EFA8  F011         	goto	l1161
  1053   0022FA                     l1133:
  1054                           
  1055                           ;newmain.c: 203:                 result = input_X + input_Y;
  1056   0022FA  5009               	movf	evaluate@input_X^0,w,c
  1057   0022FC  240B               	addwf	evaluate@input_Y^0,w,c
  1058   0022FE  6E11               	movwf	evaluate@result^0,c
  1059   002300                     l1135:
  1060                           
  1061                           ;newmain.c: 204:                 return result;
  1062   002300  5011               	movf	evaluate@result^0,w,c
  1063   002302  EFC7  F011         	goto	l84
  1064   002306                     l1139:
  1065                           
  1066                           ;newmain.c: 206:                 result = input_X - input_Y;
  1067   002306  500B               	movf	evaluate@input_Y^0,w,c
  1068   002308  5C09               	subwf	evaluate@input_X^0,w,c
  1069   00230A  6E11               	movwf	evaluate@result^0,c
  1070   00230C  EF80  F011         	goto	l1135
  1071   002310                     l1145:
  1072                           
  1073                           ;newmain.c: 209:                 result = input_X * input_Y;
  1074   002310  5009               	movf	evaluate@input_X^0,w,c
  1075   002312  020B               	mulwf	evaluate@input_Y^0,c
  1076   002314  006F FFCC  F011    	movff	prodl,evaluate@result
  1077   00231A  EF80  F011         	goto	l1135
  1078   00231E                     l1151:
  1079                           
  1080                           ;newmain.c: 212:                 if (input_Y != 0)
  1081   00231E  500B               	movf	evaluate@input_Y^0,w,c
  1082   002320  100C               	iorwf	(evaluate@input_Y+1)^0,w,c
  1083   002322  B4D8               	btfsc	status,2,c
  1084   002324  EF96  F011         	goto	u211
  1085   002328  EF98  F011         	goto	u210
  1086   00232C                     u211:
  1087   00232C  EF80  F011         	goto	l1135
  1088   002330                     u210:
  1089   002330                     
  1090                           ;newmain.c: 213:                     result = input_X / input_Y;
  1091   002330  C009  F001         	movff	evaluate@input_X,___awdiv@dividend
  1092   002334  C00A  F002         	movff	evaluate@input_X+1,___awdiv@dividend+1
  1093   002338  C00B  F003         	movff	evaluate@input_Y,___awdiv@divisor
  1094   00233C  C00C  F004         	movff	evaluate@input_Y+1,___awdiv@divisor+1
  1095   002340  EC17  F011         	call	___awdiv	;wreg free
  1096   002344  5001               	movf	?___awdiv^0,w,c
  1097   002346  6E11               	movwf	evaluate@result^0,c
  1098   002348  EF80  F011         	goto	l1135
  1099   00234C                     l1159:
  1100                           
  1101                           ;newmain.c: 217:     }
  1102   00234C  EFC6  F011         	goto	l1163
  1103   002350                     l1161:
  1104   002350  C00D  F00F         	movff	evaluate@Operation,??_evaluate
  1105   002354  C00E  F010         	movff	evaluate@Operation+1,??_evaluate+1
  1106                           
  1107                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1108                           ; Switch size 1, requested type "simple"
  1109                           ; Number of cases is 1, Range of values is 0 to 0
  1110                           ; switch strategies available:
  1111                           ; Name         Instructions Cycles
  1112                           ; simple_byte            4     3 (average)
  1113                           ;	Chosen strategy is simple_byte
  1114   002358  5010               	movf	(??_evaluate+1)^0,w,c
  1115   00235A  0A00               	xorlw	0	; case 0
  1116   00235C  B4D8               	btfsc	status,2,c
  1117   00235E  EFB3  F011         	goto	l1229
  1118   002362  EFA6  F011         	goto	l1159
  1119   002366                     l1229:
  1120                           
  1121                           ; Switch size 1, requested type "simple"
  1122                           ; Number of cases is 4, Range of values is 10 to 13
  1123                           ; switch strategies available:
  1124                           ; Name         Instructions Cycles
  1125                           ; simple_byte           13     7 (average)
  1126                           ;	Chosen strategy is simple_byte
  1127   002366  500F               	movf	??_evaluate^0,w,c
  1128   002368  0A0A               	xorlw	10	; case 10
  1129   00236A  B4D8               	btfsc	status,2,c
  1130   00236C  EF7D  F011         	goto	l1133
  1131   002370  0A01               	xorlw	1	; case 11
  1132   002372  B4D8               	btfsc	status,2,c
  1133   002374  EF83  F011         	goto	l1139
  1134   002378  0A07               	xorlw	7	; case 12
  1135   00237A  B4D8               	btfsc	status,2,c
  1136   00237C  EF88  F011         	goto	l1145
  1137   002380  0A01               	xorlw	1	; case 13
  1138   002382  B4D8               	btfsc	status,2,c
  1139   002384  EF8F  F011         	goto	l1151
  1140   002388  EFA6  F011         	goto	l1159
  1141   00238C                     l1163:
  1142                           
  1143                           ;newmain.c: 218:     return result;
  1144   00238C  0E00               	movlw	0
  1145   00238E                     l84:
  1146   00238E  0012               	return		;funcret
  1147   002390                     __end_of_evaluate:
  1148                           	callstack 0
  1149                           
  1150 ;; *************** function ___awdiv *****************
  1151 ;; Defined at:
  1152 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\awdiv.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;  dividend        2    0[COMRAM] int 
  1155 ;;  divisor         2    2[COMRAM] int 
  1156 ;; Auto vars:     Size  Location     Type
  1157 ;;  quotient        2    6[COMRAM] int 
  1158 ;;  sign            1    5[COMRAM] unsigned char 
  1159 ;;  counter         1    4[COMRAM] unsigned char 
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  2    0[COMRAM] int 
  1162 ;; Registers used:
  1163 ;;		wreg, status,2, status,0
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  1169 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1170 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1172 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1173 ;;Total ram usage:        8 bytes
  1174 ;; Hardware stack levels used: 1
  1175 ;; This function calls:
  1176 ;;		Nothing
  1177 ;; This function is called by:
  1178 ;;		_evaluate
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           	psect	text6
  1183   00222E                     __ptext6:
  1184                           	callstack 0
  1185   00222E                     ___awdiv:
  1186                           	callstack 29
  1187   00222E  0E00               	movlw	0
  1188   002230  6E06               	movwf	___awdiv@sign^0,c
  1189   002232  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1190   002234  EF20  F011         	goto	u150
  1191   002238  EF1E  F011         	goto	u151
  1192   00223C                     u151:
  1193   00223C  EF26  F011         	goto	l1095
  1194   002240                     u150:
  1195   002240  6C03               	negf	___awdiv@divisor^0,c
  1196   002242  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  1197   002244  B0D8               	btfsc	status,0,c
  1198   002246  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  1199   002248  0E01               	movlw	1
  1200   00224A  6E06               	movwf	___awdiv@sign^0,c
  1201   00224C                     l1095:
  1202   00224C  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  1203   00224E  EF2D  F011         	goto	u160
  1204   002252  EF2B  F011         	goto	u161
  1205   002256                     u161:
  1206   002256  EF33  F011         	goto	l1101
  1207   00225A                     u160:
  1208   00225A  6C01               	negf	___awdiv@dividend^0,c
  1209   00225C  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  1210   00225E  B0D8               	btfsc	status,0,c
  1211   002260  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  1212   002262  0E01               	movlw	1
  1213   002264  1A06               	xorwf	___awdiv@sign^0,f,c
  1214   002266                     l1101:
  1215   002266  0E00               	movlw	0
  1216   002268  6E08               	movwf	(___awdiv@quotient+1)^0,c
  1217   00226A  0E00               	movlw	0
  1218   00226C  6E07               	movwf	___awdiv@quotient^0,c
  1219   00226E  5003               	movf	___awdiv@divisor^0,w,c
  1220   002270  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  1221   002272  B4D8               	btfsc	status,2,c
  1222   002274  EF3E  F011         	goto	u171
  1223   002278  EF40  F011         	goto	u170
  1224   00227C                     u171:
  1225   00227C  EF68  F011         	goto	l1123
  1226   002280                     u170:
  1227   002280  0E01               	movlw	1
  1228   002282  6E05               	movwf	___awdiv@counter^0,c
  1229   002284  EF48  F011         	goto	l1109
  1230   002288                     l1107:
  1231   002288  90D8               	bcf	status,0,c
  1232   00228A  3603               	rlcf	___awdiv@divisor^0,f,c
  1233   00228C  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  1234   00228E  2A05               	incf	___awdiv@counter^0,f,c
  1235   002290                     l1109:
  1236   002290  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  1237   002292  EF4D  F011         	goto	u181
  1238   002296  EF4F  F011         	goto	u180
  1239   00229A                     u181:
  1240   00229A  EF44  F011         	goto	l1107
  1241   00229E                     u180:
  1242   00229E                     l1111:
  1243   00229E  90D8               	bcf	status,0,c
  1244   0022A0  3607               	rlcf	___awdiv@quotient^0,f,c
  1245   0022A2  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  1246   0022A4  5003               	movf	___awdiv@divisor^0,w,c
  1247   0022A6  5C01               	subwf	___awdiv@dividend^0,w,c
  1248   0022A8  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1249   0022AA  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  1250   0022AC  A0D8               	btfss	status,0,c
  1251   0022AE  EF5B  F011         	goto	u191
  1252   0022B2  EF5D  F011         	goto	u190
  1253   0022B6                     u191:
  1254   0022B6  EF62  F011         	goto	l1119
  1255   0022BA                     u190:
  1256   0022BA  5003               	movf	___awdiv@divisor^0,w,c
  1257   0022BC  5E01               	subwf	___awdiv@dividend^0,f,c
  1258   0022BE  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1259   0022C0  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  1260   0022C2  8007               	bsf	___awdiv@quotient^0,0,c
  1261   0022C4                     l1119:
  1262   0022C4  90D8               	bcf	status,0,c
  1263   0022C6  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  1264   0022C8  3203               	rrcf	___awdiv@divisor^0,f,c
  1265   0022CA  2E05               	decfsz	___awdiv@counter^0,f,c
  1266   0022CC  EF4F  F011         	goto	l1111
  1267   0022D0                     l1123:
  1268   0022D0  5006               	movf	___awdiv@sign^0,w,c
  1269   0022D2  B4D8               	btfsc	status,2,c
  1270   0022D4  EF6E  F011         	goto	u201
  1271   0022D8  EF70  F011         	goto	u200
  1272   0022DC                     u201:
  1273   0022DC  EF74  F011         	goto	l1127
  1274   0022E0                     u200:
  1275   0022E0  6C07               	negf	___awdiv@quotient^0,c
  1276   0022E2  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  1277   0022E4  B0D8               	btfsc	status,0,c
  1278   0022E6  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  1279   0022E8                     l1127:
  1280   0022E8  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1281   0022EC  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1282   0022F0  0012               	return		;funcret
  1283   0022F2                     __end_of___awdiv:
  1284                           	callstack 0
  1285                           
  1286 ;; *************** function _display *****************
  1287 ;; Defined at:
  1288 ;;		line 221 in file "newmain.c"
  1289 ;; Parameters:    Size  Location     Type
  1290 ;;  Result          1    wreg     unsigned char 
  1291 ;; Auto vars:     Size  Location     Type
  1292 ;;  Result          1    0[COMRAM] unsigned char 
  1293 ;; Return value:  Size  Location     Type
  1294 ;;                  1    wreg      void 
  1295 ;; Registers used:
  1296 ;;		wreg
  1297 ;; Tracked objects:
  1298 ;;		On entry : 0/0
  1299 ;;		On exit  : 0/0
  1300 ;;		Unchanged: 0/0
  1301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  1302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1303 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1305 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1306 ;;Total ram usage:        1 bytes
  1307 ;; Hardware stack levels used: 1
  1308 ;; This function calls:
  1309 ;;		Nothing
  1310 ;; This function is called by:
  1311 ;;		_main
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           	psect	text7
  1316   0024DE                     __ptext7:
  1317                           	callstack 0
  1318   0024DE                     _display:
  1319                           	callstack 30
  1320                           
  1321                           ;incstack = 0
  1322                           ;display@Result stored from wreg
  1323   0024DE  6E01               	movwf	display@Result^0,c
  1324   0024E0                     
  1325                           ;newmain.c: 221: void display(unsigned char Result);newmain.c: 222: {;newmain.c: 223:   
      +                            PORTD = Result;
  1326   0024E0  0060  F007  FFCD   	movff	display@Result,16333	;volatile
  1327   0024E6  0012               	return		;funcret
  1328   0024E8                     __end_of_display:
  1329                           	callstack 0
  1330                           
  1331                           	psect	smallconst
  1332   002000                     __psmallconst:
  1333                           	callstack 0
  1334   002000  00                 	db	0
  1335   002001  00                 	db	0	; dummy byte at the end
  1336   000000                     
  1337                           	psect	rparam
  1338   000000                     
  1339                           	psect	config
  1340                           
  1341                           ;Config register CONFIG1L @ 0x300000
  1342                           ;	External Oscillator Selection
  1343                           ;	FEXTOSC = LP, LP (crystal oscillator) optimized for 32.768 kHz; PFM set to low power
  1344                           ;	Reset Oscillator Selection
  1345                           ;	RSTOSC = EXTOSC, EXTOSC operating per FEXTOSC bits (device manufacturing default)
  1346   300000                     	org	3145728
  1347   300000  F8                 	db	248
  1348                           
  1349                           ;Config register CONFIG1H @ 0x300001
  1350                           ;	Clock out Enable bit
  1351                           ;	CLKOUTEN = OFF, CLKOUT function is disabled
  1352                           ;	PRLOCKED One-Way Set Enable bit
  1353                           ;	PR1WAY = ON, PRLOCK bit can be cleared and set only once
  1354                           ;	Clock Switch Enable bit
  1355                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
  1356                           ;	Fail-Safe Clock Monitor Enable bit
  1357                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
  1358   300001                     	org	3145729
  1359   300001  FF                 	db	255
  1360                           
  1361                           ;Config register CONFIG2L @ 0x300002
  1362                           ;	MCLR Enable bit
  1363                           ;	MCLRE = EXTMCLR, If LVP = 0, MCLR pin is MCLR; If LVP = 1, RE3 pin function is MCLR
  1364                           ;	Power-up timer selection bits
  1365                           ;	PWRTS = PWRT_OFF, PWRT is disabled
  1366                           ;	Multi-vector enable bit
  1367                           ;	MVECEN = ON, Multi-vector enabled, Vector table used for interrupts
  1368                           ;	IVTLOCK bit One-way set enable bit
  1369                           ;	IVT1WAY = ON, IVTLOCK bit can be cleared and set only once
  1370                           ;	Low Power BOR Enable bit
  1371                           ;	LPBOREN = OFF, ULPBOR disabled
  1372                           ;	Brown-out Reset Enable bits
  1373                           ;	BOREN = SBORDIS, Brown-out Reset enabled , SBOREN bit is ignored
  1374   300002                     	org	3145730
  1375   300002  FF                 	db	255
  1376                           
  1377                           ;Config register CONFIG2H @ 0x300003
  1378                           ;	Brown-out Reset Voltage Selection bits
  1379                           ;	BORV = VBOR_2P45, Brown-out Reset Voltage (VBOR) set to 2.45V
  1380                           ;	ZCD Disable bit
  1381                           ;	ZCD = OFF, ZCD disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON
  1382                           ;	PPSLOCK bit One-Way Set Enable bit
  1383                           ;	PPS1WAY = ON, PPSLOCK bit can be cleared and set only once; PPS registers remain locke
      +                          d after one clear/set cycle
  1384                           ;	Stack Full/Underflow Reset Enable bit
  1385                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1386                           ;	Debugger Enable bit
  1387                           ;	DEBUG = OFF, Background debugger disabled
  1388                           ;	Extended Instruction Set Enable bit
  1389                           ;	XINST = OFF, Extended Instruction Set and Indexed Addressing Mode disabled
  1390   300003                     	org	3145731
  1391   300003  FF                 	db	255
  1392                           
  1393                           ;Config register CONFIG3L @ 0x300004
  1394                           ;	WDT Period selection bits
  1395                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
  1396                           ;	WDT operating mode
  1397                           ;	WDTE = OFF, WDT Disabled; SWDTEN is ignored
  1398   300004                     	org	3145732
  1399   300004  9F                 	db	159
  1400                           
  1401                           ;Config register CONFIG3H @ 0x300005
  1402                           ;	WDT Window Select bits
  1403                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
  1404                           ;	WDT input clock selector
  1405                           ;	WDTCCS = SC, Software Control
  1406   300005                     	org	3145733
  1407   300005  FF                 	db	255
  1408                           
  1409                           ;Config register CONFIG4L @ 0x300006
  1410                           ;	Boot Block Size selection bits
  1411                           ;	BBSIZE = BBSIZE_512, Boot Block size is 512 words
  1412                           ;	Boot Block enable bit
  1413                           ;	BBEN = OFF, Boot block disabled
  1414                           ;	Storage Area Flash enable bit
  1415                           ;	SAFEN = OFF, SAF disabled
  1416                           ;	Application Block write protection bit
  1417                           ;	WRTAPP = OFF, Application Block not write protected
  1418   300006                     	org	3145734
  1419   300006  FF                 	db	255
  1420                           
  1421                           ;Config register CONFIG4H @ 0x300007
  1422                           ;	Boot Block Write Protection bit
  1423                           ;	WRTB = OFF, Boot Block not write-protected
  1424                           ;	Configuration Register Write Protection bit
  1425                           ;	WRTC = OFF, Configuration registers not write-protected
  1426                           ;	Data EEPROM Write Protection bit
  1427                           ;	WRTD = OFF, Data EEPROM not write-protected
  1428                           ;	SAF Write protection bit
  1429                           ;	WRTSAF = OFF, SAF not Write Protected
  1430                           ;	Low Voltage Programming Enable bit
  1431                           ;	LVP = ON, Low voltage programming enabled. MCLR/VPP pin function is MCLR. MCLRE config
      +                          uration bit is ignored
  1432   300007                     	org	3145735
  1433   300007  FF                 	db	255
  1434                           
  1435                           ;Config register CONFIG5L @ 0x300008
  1436                           ;	PFM and Data EEPROM Code Protection bit
  1437                           ;	CP = OFF, PFM and Data EEPROM code protection disabled
  1438   300008                     	org	3145736
  1439   300008  FF                 	db	255
  1440                           
  1441                           ;Config register CONFIG5H @ 0x300009
  1442                           ;	unspecified, using default values
  1443   300009                     	org	3145737
  1444   300009  FF                 	db	255
  1445                           tosu	equ	0x3FFF
  1446                           tosh	equ	0x3FFE
  1447                           tosl	equ	0x3FFD
  1448                           stkptr	equ	0x3FFC
  1449                           pclatu	equ	0x3FFB
  1450                           pclath	equ	0x3FFA
  1451                           pcl	equ	0x3FF9
  1452                           tblptru	equ	0x3FF8
  1453                           tblptrh	equ	0x3FF7
  1454                           tblptrl	equ	0x3FF6
  1455                           tablat	equ	0x3FF5
  1456                           prodh	equ	0x3FF4
  1457                           prodl	equ	0x3FF3
  1458                           indf0	equ	0x3FEF
  1459                           postinc0	equ	0x3FEE
  1460                           postdec0	equ	0x3FED
  1461                           preinc0	equ	0x3FEC
  1462                           plusw0	equ	0x3FEB
  1463                           fsr0h	equ	0x3FEA
  1464                           fsr0l	equ	0x3FE9
  1465                           wreg	equ	0x3FE8
  1466                           indf1	equ	0x3FE7
  1467                           postinc1	equ	0x3FE6
  1468                           postdec1	equ	0x3FE5
  1469                           preinc1	equ	0x3FE4
  1470                           plusw1	equ	0x3FE3
  1471                           fsr1h	equ	0x3FE2
  1472                           fsr1l	equ	0x3FE1
  1473                           bsr	equ	0x3FE0
  1474                           indf2	equ	0x3FDF
  1475                           postinc2	equ	0x3FDE
  1476                           postdec2	equ	0x3FDD
  1477                           preinc2	equ	0x3FDC
  1478                           plusw2	equ	0x3FDB
  1479                           fsr2h	equ	0x3FDA
  1480                           fsr2l	equ	0x3FD9
  1481                           status	equ	0x3FD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         4
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     19      24
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          256      0       0
    BANK16          256      0       0
    BANK17          256      0       0
    BANK18          256      0       0
    BANK19          256      0       0
    BANK20          256      0       0
    BANK21          256      0       0
    BANK22          256      0       0
    BANK23          256      0       0
    BANK24          256      0       0
    BANK25          256      0       0
    BANK26          256      0       0
    BANK27          256      0       0
    BANK28          256      0       0
    BANK29          256      0       0
    BANK30          256      0       0
    BANK31          256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_evaluate
    _getInputY->_getKeypress
    _getInputX->_getKeypress
    _getInputOperation->_getKeypress
    _evaluate->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _main in BANK26

    None.

Critical Paths under _main in BANK27

    None.

Critical Paths under _main in BANK28

    None.

Critical Paths under _main in BANK29

    None.

Critical Paths under _main in BANK30

    None.

Critical Paths under _main in BANK31

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1031
                                             17 COMRAM     2     2      0
                            _display
                           _evaluate
                  _getInputOperation
                          _getInputX
                          _getInputY
                        _getKeypress
 ---------------------------------------------------------------------------------
 (1) _getInputY                                            2     2      0       0
                                              1 COMRAM     2     2      0
                        _getKeypress
 ---------------------------------------------------------------------------------
 (1) _getInputX                                            2     2      0       0
                                              1 COMRAM     2     2      0
                        _getKeypress
 ---------------------------------------------------------------------------------
 (1) _getInputOperation                                    1     1      0       0
                                              1 COMRAM     1     1      0
                        _getKeypress
 ---------------------------------------------------------------------------------
 (1) _getKeypress                                          1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _evaluate                                             9     3      6    1016
                                              8 COMRAM     9     3      6
                            ___awdiv
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _display                                              1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _display
   _evaluate
     ___awdiv
   _getInputOperation
     _getKeypress
   _getInputX
     _getKeypress
   _getInputY
     _getKeypress
   _getKeypress

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM            1FFF      0       0      78        0.0%
BITBIGSFRlllhh     54A      0       0      75        0.0%
EEDATA             400      0       0       0        0.0%
BITBIGSFRllll      250      0       0      77        0.0%
BITBANK31          100      0       0      67        0.0%
BANK31             100      0       0      68        0.0%
BITBANK30          100      0       0      65        0.0%
BANK30             100      0       0      66        0.0%
BITBANK29          100      0       0      63        0.0%
BANK29             100      0       0      64        0.0%
BITBANK28          100      0       0      61        0.0%
BANK28             100      0       0      62        0.0%
BITBANK27          100      0       0      59        0.0%
BANK27             100      0       0      60        0.0%
BITBANK26          100      0       0      57        0.0%
BANK26             100      0       0      58        0.0%
BITBANK25          100      0       0      55        0.0%
BANK25             100      0       0      56        0.0%
BITBANK24          100      0       0      53        0.0%
BANK24             100      0       0      54        0.0%
BITBANK23          100      0       0      51        0.0%
BANK23             100      0       0      52        0.0%
BITBANK22          100      0       0      49        0.0%
BANK22             100      0       0      50        0.0%
BITBANK21          100      0       0      47        0.0%
BANK21             100      0       0      48        0.0%
BITBANK20          100      0       0      45        0.0%
BANK20             100      0       0      46        0.0%
BITBANK19          100      0       0      43        0.0%
BANK19             100      0       0      44        0.0%
BITBANK18          100      0       0      41        0.0%
BANK18             100      0       0      42        0.0%
BITBANK17          100      0       0      39        0.0%
BANK17             100      0       0      40        0.0%
BITBANK16          100      0       0      37        0.0%
BANK16             100      0       0      38        0.0%
BITBANK15          100      0       0      35        0.0%
BANK15             100      0       0      36        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     13      18       1       25.3%
BITBIGSFRhh         32      0       0      69        0.0%
BITBIGSFRlllhl      1F      0       0      76        0.0%
BITBIGSFRllhh        5      0       0      73        0.0%
BITBIGSFRlhh         5      0       0      71        0.0%
BITBIGSFRllhl        1      0       0      74        0.0%
BITBIGSFRlhl         1      0       0      72        0.0%
BITBIGSFRhl          1      0       0      70        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_8             0      0       0     200        0.0%
SFR_8                0      0       0     200        0.0%
BITSFR_7             0      0       0     200        0.0%
SFR_7                0      0       0     200        0.0%
BITSFR_6             0      0       0     200        0.0%
SFR_6                0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      18      16        0.0%
DATA                 0      0      18       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Thu Apr 11 17:34:19 2024

                       l40 2066                         l41 206C                         l33 214A  
                       l42 2072                         l34 2012                         l35 2018  
                       l52 210E                         l36 201E                         l53 2114  
                       l54 211A                         l46 20BA                         l55 2146  
                       l47 20C0                         l48 20C6                         l64 248A  
                       l73 240C                         l84 238E                         l93 24E6  
                       l78 24CA                         l79 24CE                         u70 243C  
                       u71 2438                         u80 2486                         u81 2482  
                       u90 23BE                         u91 23BA               ___awdiv@sign 0006  
                      l339 22F0                        l803 2024                        l805 204A  
                      l831 20A2                        l807 204E                        l833 20B4  
                      l809 2060                        l851 20CC                        l827 2078  
                      l931 2418                        l853 20F2                        l829 209E  
                      l781 2002                        l941 245C                        l933 241E  
                      l855 20F6                        l783 2004                        l943 2462  
                      l935 242C                        l927 240E                        l951 2390  
                      l857 2108                        l785 200C                        l945 2468  
                      l937 243C                        l929 2412                        l961 23BE  
                      l953 2394                        l875 2120                        l947 2476  
                      l939 2454                        l971 23F8                        l963 23D6  
                      l955 239A                        l877 2148                        l981 249C  
                      l949 2486                        l973 2408                        l965 23DE  
                      l957 23A0                        l983 24AA                        l975 248C  
                      l967 23E4                        l959 23AE                        l985 24BA  
                      l977 2490                        l969 23EA                        l979 2496  
                      u100 2408                        u101 2404                        u110 24BA  
                      u111 24B6                        u200 22E0                        u120 24CA  
                      u201 22DC                        u121 24C6                        u210 2330  
                      u211 232C                        u220 2222                        u221 221E  
                      u150 2240                        u151 223C                        u160 225A  
                      u161 2256                        u170 2280                        u171 227C  
                      u307 23F0                        u180 229E                        u181 229A  
                      u317 2424                        u237 2180                        u190 22BA  
                      u191 22B6                        u327 2446                        u247 219E  
                      u337 246E                        u257 21BC                        u347 24A2  
                      u267 21EC                        u357 2054                        u277 2200  
                      u367 20A8                        u287 23A6                        u377 20FC  
                      u297 23C8                        _key 0018                        wreg 3FE8  
                     l1101 2266                       l1111 229E                       l1103 226E  
                     l1121 22CA                       l1113 22A4                       l1105 2280  
                     l1201 2208                       l1027 24E0                       l1115 22BA  
                     l1107 2288                       l1123 22D0                       l1131 22F2  
                     l1203 220E                       l1125 22E0                       l1117 22C2  
                     l1109 2290                       l1133 22FA                       l1205 2222  
                     l1127 22E8                       l1119 22C4                       l1151 231E  
                     l1135 2300                       l1153 2330                       l1145 2310  
                     l1161 2350                       l1091 2240                       l1163 238C  
                     l1139 2306                       l1171 214C                       l1093 2248  
                     l1229 2366                       l1181 2190                       l1173 216E  
                     l1095 224C                       l1087 222E                       l1159 234C  
                     l1191 21C8                       l1183 2194                       l1175 2172  
                     l1097 225A                       l1089 2232                       l1193 21E0  
                     l1185 21AA                       l1177 2176                       l1099 2262  
                     l1195 21E6                       l1187 21AE                       l1179 218C  
                     l1197 21F4                       l1189 21B2                       l1199 21FA  
                     _LATB 3FBB                       _LATD 3FBD                       _main 214C  
                     prodl 3FF3                       start FFFC               ___param_bank 0000  
                    ?_main 0001            __end_of___awdiv 22F2            ___awdiv@divisor 0003  
          ___awdiv@counter 0005                      _PORTB 3FCB                      _PORTD 3FCD  
                    _TRISB 3FC3                      _TRISD 3FC5            __end_of_display 24E8  
                    status 3FD8            __initialization 24D0               __end_of_main 222E  
                   ??_main 0012              __activetblptr 0003           ___awdiv@dividend 0001  
                   _ANSELB 3A50                     _ANSELD 3A70              display@Result 0001  
                   _Result 0014                  ??___awdiv 0005           __end_of_evaluate 2390  
         ___awdiv@quotient 0007                     isa$std 0001                  ??_display 0001  
             __mediumconst 0000             evaluate@result 0011                 __accesstop 0060  
  __end_of__initialization 24D8              ___rparam_used 0001             __pcstackCOMRAM 0001  
               __pnvCOMRAM 0018                  ?_evaluate 0009          __end_of_getInputX 248C  
        __end_of_getInputY 240E                    __Hparam 0000                    __Lparam 0000  
                  ___awdiv 222E               __psmallconst 2000                    __pcinit 24D0  
                  __ramtop 2000                    __ptext0 214C                    __ptext1 2390  
                  __ptext2 240E                    __ptext3 248C                    __ptext4 2002  
                  __ptext5 22F2                    __ptext6 222E                    __ptext7 24DE  
                  _display 24DE                    _input_X 0017                    _input_Y 0016  
        _getInputOperation 248C         ?_getInputOperation 0001       end_of_initialization 24D8  
               ??_evaluate 000F        ??_getInputOperation 0002              ??_getKeypress 0001  
__end_of_getInputOperation 24D0            evaluate@input_X 0009            evaluate@input_Y 000B  
      start_initialization 24D0        __end_of_getKeypress 214C                  _Operation 0015  
              __pbssCOMRAM 0014                   ?___awdiv 0001                  _getInputX 240E  
                _getInputY 2390                   ?_display 0001                __smallconst 2000  
              _getKeypress 2002                 ?_getInputX 0001                 ?_getInputY 0001  
                 __Hrparam 0000                   __Lrparam 0000                   _evaluate 22F2  
        evaluate@Operation 000D                   isa$xinst 0000                ??_getInputX 0002  
              ??_getInputY 0002               ?_getKeypress 0001  
